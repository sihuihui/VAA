---
title: "Take-home Exercise 4: Prototyping Time Series Module for Visual Analytics Shiny Application" 
author: "Goh Si Hui"
date: 2024/02/25
execute: 
  echo: true
  eval: true
  freeze: true
  warning: false
  message: false
---

# About this Exercise
In this exercise, we will be preparing the time-series forecasting module of the proposed Shiny Application and complete the following task:

-   Evaluate and determine the necessary R packages needed for my group project's Shiny application;

-   Prepare and test the specific R codes can be run and returned the correct output as expected; 

-   Determine the parameters and outputs that will be exposed on the Shiny applications; and 

-   Select the appropriate Shiny UI components for exposing the parameters determined above. 

# Getting Started

## Loading R Packages

```{r}
pacman::p_load(tidyverse, lubridate, gridExtra, readxl, knitr, data.table, ggplot2, forecast, MLmetrics, tsbox, xts, plotly, hrbrthemes, astsa)
```

## Importing Data Into R

Talk about how we get this data: made use of data.gov.sg's API

```{r}
data <- read_csv("data/daily_historical.csv")
```

```{r}
glimpse(data)

```
# Temperature Data 

## Selecting the relevant columns for Temperature Data 
```{r}
temp <- data %>%
  select(station, year, month, day, mean_temperature, maximum_temperature, minimum_temperature) 

glimpse(temp)
```
## Creating a date column
```{r}
temp$tdate <- paste(temp$year, "-", temp$month, "-", temp$day)
temp <- temp %>%
  mutate(tdate = ymd(tdate))

glimpse(temp)
```
## Checking for missing values 

```{r}
summary(temp)

```
drop those rows where year, month day and date are missing. 

```{r}
temp <- temp %>%
  drop_na(c(year, month, day, tdate))

summary(temp)
```

```{r}
unique(temp$station)
```

```{r}
missing.values <- temp %>%
  gather(key = "key", value = "val") %>%
  mutate(isna = is.na(val)) %>%
  group_by(key) %>%
  mutate(total = n()) %>%
  group_by(key, total, isna) %>%
  summarise(num.isna = n()) %>%
  mutate(pct = num.isna / total * 100)

levels <-
    (missing.values  %>% filter(isna == T) %>% arrange(desc(pct)))$key

percentage.plot <- missing.values %>%
      ggplot() +
        geom_bar(aes(x = reorder(key, desc(pct)), 
                     y = pct, fill=isna), 
                 stat = 'identity', alpha=0.8) +
      scale_x_discrete(limits = levels) +
      scale_fill_manual(name = "", 
                        values = c('steelblue', 'tomato3'), labels = c("Present", "Missing")) +
      coord_flip() +
      labs(title = "Percentage of missing values", x =
             'Variable', y = "% of missing values")

percentage.plot


```
## Further exploration of missing mean_temperature using plotly


```{r}
temp_mean_wide <- temp %>%
  filter(year > 1983) %>%
  select(tdate, station, mean_temperature) %>%
  pivot_wider(names_from = station, values_from = mean_temperature)

glimpse(temp_mean_wide)
```


```{r}
plot_ly(data = temp_mean_wide, 
        x = ~tdate, 
        y = ~ Admiralty, 
        type = "scatter", 
        mode = "lines+markers") |> 
  layout(title = "Temperature observed by Weather Station", 
       xaxis = list(title = "Date"), 
       yaxis = list(title = "", range = c(0,40)), 
      theme_ipsum_rc(plot_title_size = 13, plot_title_margin=4, subtitle_size=11, subtitle_margin=4,  
                 axis_title_size = 8, axis_text_size=8, axis_title_face= "bold", plot_margin = margin(4, 4, 4, 4)),  
       updatemenus = list(list(type = 'dropdown', 
                               xref = "paper", 
                               yref = "paper", 
                               xanchor = "left",
                               x = 0.04,
                               y = 0.95, 
                               buttons = list(
                                 list(method = "update",
                                      args = list(list(y = list(temp_mean_wide$Admiralty)), 
                                                    list(yaxis = list(title = "Temperature in Admiralty", range = c(0,40)))),label = "Admiralty"),
                                 list(method = "update",
                                      args = list(list(y = list(temp_mean_wide$`East Coast Parkway`)), 
                                                    list(yaxis = list(title = "Temperature in East Coast Parkway", range = c(0,40)))),label = "East Coast Parkway"), 
                                 list(method = "update",
                                      args = list(list(y = list(temp_mean_wide$`Ang Mo Kio`)), 
                                                    list(yaxis = list(title = "Temperature in Ang Mo Kio", range = c(0,40)))),label = "Ang Mo Kio"), 
                                 list(method = "update",
                                      args = list(list(y = list(temp_mean_wide$Newton)), 
                                                    list(yaxis = list(title = "Temperature in Newton", range = c(0,40)))),label = "Newton"), 
                                 list(method = "update",
                                      args = list(list(y = list(temp_mean_wide$`Tuas South`)), 
                                                    list(yaxis = list(title = "Temperature in Tuas South", range = c(0,40)))),label = "Tuas South"),
                                  list(method = "update",
                                      args = list(list(y = list(temp_mean_wide$`Pasir Panjang`)), 
                                                    list(yaxis = list(title = "Temperature in Pasir Panjang", range = c(0,40)))),label = "Pasir Panjang"), 
                                  list(method = "update",
                                      args = list(list(y = list(temp_mean_wide$`Jurong Island`)), 
                                                    list(yaxis = list(title = "Temperature in Jurong Island", range = c(0,40)))),label = "Jurong Island"), 
                                 list(method = "update",
                                      args = list(list(y = list(temp_mean_wide$`Choa Chu Kang (South)`)), 
                                                    list(yaxis = list(title = "Temperature in Choa Chu Kang (South)", range = c(0,40)))),label = "Choa Chu Kang (South)"), 
                                 list(method = "update", 
                                        args = list(list(y = list(temp_mean_wide$Changi)), 
                                                    list(yaxis = list(title = "Temperature in Changi", range = c(0,40)))),label = "Changi"),
                                  list(method = "update",
                                      args = list(list(y = list(temp_mean_wide$`Tai Seng`)), 
                                                    list(yaxis = list(title = "Temperature in Tai Seng", range = c(0,40)))),label = "Tai Seng"),
                                  list(method = "update",
                                      args = list(list(y = list(temp_mean_wide$`Jurong (West)`)), 
                                                    list(yaxis = list(title = "Temperature in Jurong West", range = c(0,40)))),label = "Jurong West"), 
                                   list(method = "update", 
                                        args = list(list(y = list(temp_mean_wide$Clementi)), 
                                                    list(yaxis = list(title = "Temperature  in Clementi", range = c(0,40)))),label = "Clementi"), 
                                   list(method = "update", 
                                        args = list(list(y = list(temp_mean_wide$`Sentosa Island`)), 
                                                    list(yaxis = list(title = "Temperature  in Sentosa", range = c(0,40)))),label = "Sentosa"), 
                                 list(method = "update", 
                                        args = list(list(y = list(temp_mean_wide$`Macritchie Reservoir`)), 
                                                    list(yaxis = list(title = "Temperature  at Macritchie Reservoir", range = c(0,40)))),label = "Macritchie Reservoir"), 
                                list(method = "update", 
                                        args = list(list(y = list(temp_mean_wide$`Lower Peirce Reservoir`)), 
                                                    list(yaxis = list(title = "Temperature  at Lower Peirce Reservoir", range = c(0,40)))),label = "Lower Peirce Reservoir"),
                                 list(method = "update", 
                                        args = list(list(y = list(temp_mean_wide$`Lim Chu Kang`)), 
                                                    list(yaxis = list(title = "Temperature at Lim Chu Kang", range = c(0,40)))),label = "Lim Chu Kang"),
                                list(method = "update", 
                                        args = list(list(y = list(temp_mean_wide$`Marine Parade`)), 
                                                    list(yaxis = list(title = "Temperature at Marine Parade", range = c(0,40)))),label = "Marine Parade"),
                                list(method = "update", 
                                        args = list(list(y = list(temp_mean_wide$`Choa Chu Kang (Central)`)), 
                                                    list(yaxis = list(title = "Temperature at Choa Chu Kang (Central)", range = c(0,40)))),label = "Choa Chu Kang (Central)"),
                                list(method = "update", 
                                        args = list(list(y = list(temp_mean_wide$`Choa Chu Kang (Central)`)), 
                                                    list(yaxis = list(title = "Temperature at Choa Chu Kang (Central)", range = c(0,40)))),label = "Choa Chu Kang (Central)"),
                                list(method = "update", 
                                        args = list(list(y = list(temp_mean_wide$`Nicoll Highway`)), 
                                                    list(yaxis = list(title = "Temperature at Nicoll Highway", range = c(0,40)))),label = "Nicoll Highway"),
                                list(method = "update", 
                                        args = list(list(y = list(temp_mean_wide$`Botanic Garden`)), 
                                                    list(yaxis = list(title = "Temperature at Botanic Garden", range = c(0,40)))),label = "Botanic Garden"),
                                list(method = "update", 
                                        args = list(list(y = list(temp_mean_wide$Whampoa)), 
                                                    list(yaxis = list(title = "Temperature at Whampoa", range = c(0,40)))),label = "Whampoa"),
                                list(method = "update", 
                                        args = list(list(y = list(temp_mean_wide$`Jurong Pier`)), 
                                                    list(yaxis = list(title = "Temperature at Jurong Pier", range = c(0,40)))),label = "Jurong Pier"),
                                list(method = "update", 
                                        args = list(list(y = list(temp_mean_wide$`Ulu Pandan`)), 
                                                    list(yaxis = list(title = "Temperature at Ulu Pandan", range = c(0,40)))),label = "Ulu Pandan"),
                                list(method = "update", 
                                        args = list(list(y = list(temp_mean_wide$Mandai)), 
                                                    list(yaxis = list(title = "Temperature at Mandai", range = c(0,40)))),label = "Mandai"),
                                list(method = "update", 
                                        args = list(list(y = list(temp_mean_wide$`Bukit Panjang`)), 
                                                    list(yaxis = list(title = "Temperature at Bukit Panjang", range = c(0,40)))),label = "Bukit Panjang"),
                                list(method = "update", 
                                        args = list(list(y = list(temp_mean_wide$`Kranji Reservoir`)), 
                                                    list(yaxis = list(title = "Temperature at Kranji Reservoir", range = c(0,40)))),label = "Kranji Reservoir"),
                                list(method = "update", 
                                        args = list(list(y = list(temp_mean_wide$`Upper Peirce Reservoir`)), 
                                                    list(yaxis = list(title = "Temperature at Upper Peirce Reservoir", range = c(0,40)))),label = "Upper Peirce Reservoir"),
                                list(method = "update", 
                                        args = list(list(y = list(temp_mean_wide$`Kent Ridge`)), 
                                                    list(yaxis = list(title = "Temperature at Kent Ridge", range = c(0,40)))),label = "Kent Ridge"),
                                list(method = "update", 
                                        args = list(list(y = list(temp_mean_wide$Queenstown)), 
                                                    list(yaxis = list(title = "Temperature at Queenstown", range = c(0,40)))),label = "Queenstown"),
                                list(method = "update", 
                                        args = list(list(y = list(temp_mean_wide$`Tanjong Katong`)), 
                                                    list(yaxis = list(title = "Temperature at Tanjong Katong", range = c(0,40)))),label = "Tanjong Katong"),
                                list(method = "update", 
                                        args = list(list(y = list(temp_mean_wide$`Somerset (Road)`)), 
                                                    list(yaxis = list(title = "Temperature at Somerset (Road)", range = c(0,40)))),label = "Somerset (Road)"),
                                list(method = "update", 
                                        args = list(list(y = list(temp_mean_wide$`Punggol`)), 
                                                    list(yaxis = list(title = "Temperature at Punggol", range = c(0,40)))),label = "Punggol"),
                                list(method = "update", 
                                        args = list(list(y = list(temp_mean_wide$`Simei`)), 
                                                    list(yaxis = list(title = "Temperature at Simei", range = c(0,40)))),label = "Simei"),
                                list(method = "update", 
                                        args = list(list(y = list(temp_mean_wide$`Toa Payoh`)), 
                                                    list(yaxis = list(title = "Temperature at Toa Payoh", range = c(0,40)))),label = "Toa Payoh"),
                                list(method = "update", 
                                        args = list(list(y = list(temp_mean_wide$`Tuas`)), 
                                                    list(yaxis = list(title = "Temperature at Tuas", range = c(0,40)))),label = "Tuas"),
                                list(method = "update", 
                                        args = list(list(y = list(temp_mean_wide$`Bukit Timah`)), 
                                                    list(yaxis = list(title = "Temperature at Bukit Timah", range = c(0,40)))),label = "Bukit Timah"),
                                list(method = "update", 
                                        args = list(list(y = list(temp_mean_wide$`Pasir Ris (Central)`)), 
                                                    list(yaxis = list(title = "Temperature at Pasir Ris (Central)", range = c(0,40)))),label = "Pasir Ris (Central)")
                               ))))  



```


Seems like there are some weather stations with no temperature data, some weather stations have temperature data for certain years, and some stations have temperature data from 1984 onwards. 

Let's explore further.

```{r}
missing.values <- temp_mean_wide %>%
  gather(key = "key", value = "val") %>%
  mutate(isna = is.na(val)) %>%
  group_by(key) %>%
  mutate(total = n()) %>%
  group_by(key, total, isna) %>%
  summarise(num.isna = n()) %>%
  mutate(pct = num.isna / total * 100)

levels <-
    (missing.values  %>% filter(isna == T) %>% arrange(desc(pct)))$key

percentage.plot <- missing.values %>%
      ggplot() +
        geom_bar(aes(x = reorder(key, desc(pct)), 
                     y = pct, fill=isna), 
                 stat = 'identity', alpha=0.8) +
      scale_x_discrete(limits = levels) +
      scale_fill_manual(name = "", 
                        values = c('steelblue', 'tomato3'), labels = c("Present", "Missing")) +
      coord_flip() +
      labs(title = "Percentage of missing values", x =
             'Variable', y = "% of missing values")

percentage.plot


```

Drop the stations with no weather data at all. 

```{r}
notempdata <- missing.values %>%
  filter(isna == TRUE & pct==100)

notempdata$key
```

```{r}

stationstoremove <- c("Botanic Garden","Bukit Panjang","Bukit Timah","Choa Chu Kang (Central)","Jurong Pier","Kent Ridge", "Kranji Reservoir", "Lim Chu Kang", "Lower Peirce Reservoir", "Macritchie Reservoir","Mandai", "Marine Parade","Nicoll Highway", "Pasir Ris (Central)", "Punggol", "Queenstown","Simei", "Somerset (Road)","Tanjong Katong", "Toa Payoh", "Tuas", "Ulu Pandan", "Upper Peirce Reservoir","Whampoa")

#create a operator to exclude things 
'%!in%' <- function(x,y)!('%in%'(x,y))

#excluded stations that have no temp data at all 
temp_clean <- temp %>%
  filter(station %!in% stationstoremove)

glimpse(temp_clean)
```

```{r}

temp_mean_widec <- temp_clean %>%
  select(tdate, station, mean_temperature) %>%
  pivot_wider(names_from = station, values_from = mean_temperature)

glimpse(temp_mean_widec)
```

```{r}
plot_ly(data = temp_mean_widec, 
        x = ~tdate, 
        y = ~ Admiralty, 
        type = "scatter", 
        mode = "lines+markers") |> 
  layout(title = "Temperature observed by Weather Station", 
       xaxis = list(title = "Date"), 
       yaxis = list(title = "", range = c(0,40)), 
      theme_ipsum_rc(plot_title_size = 13, plot_title_margin=4, subtitle_size=11, subtitle_margin=4,  
                 axis_title_size = 8, axis_text_size=8, axis_title_face= "bold", plot_margin = margin(4, 4, 4, 4)),  
       updatemenus = list(list(type = 'dropdown', 
                               xref = "paper", 
                               yref = "paper", 
                               xanchor = "left",
                               x = 0.04,
                               y = 0.95, 
                               buttons = list(
                                 list(method = "update",
                                      args = list(list(y = list(temp_mean_widec$Admiralty)), 
                                                    list(yaxis = list(title = "Temperature in Admiralty", range = c(0,40)))),label = "Admiralty"),
                                 list(method = "update",
                                      args = list(list(y = list(temp_mean_widec$`East Coast Parkway`)), 
                                                    list(yaxis = list(title = "Temperature in East Coast Parkway", range = c(0,40)))),label = "East Coast Parkway"), 
                                 list(method = "update",
                                      args = list(list(y = list(temp_mean_widec$`Ang Mo Kio`)), 
                                                    list(yaxis = list(title = "Temperature in Ang Mo Kio", range = c(0,40)))),label = "Ang Mo Kio"), 
                                 list(method = "update",
                                      args = list(list(y = list(temp_mean_widec$Newton)), 
                                                    list(yaxis = list(title = "Temperature in Newton", range = c(0,40)))),label = "Newton"), 
                                 list(method = "update",
                                      args = list(list(y = list(temp_mean_widec$`Tuas South`)), 
                                                    list(yaxis = list(title = "Temperature in Tuas South", range = c(0,40)))),label = "Tuas South"),
                                  list(method = "update",
                                      args = list(list(y = list(temp_mean_widec$`Pasir Panjang`)), 
                                                    list(yaxis = list(title = "Temperature in Pasir Panjang", range = c(0,40)))),label = "Pasir Panjang"), 
                                  list(method = "update",
                                      args = list(list(y = list(temp_mean_widec$`Jurong Island`)), 
                                                    list(yaxis = list(title = "Temperature in Jurong Island", range = c(0,40)))),label = "Jurong Island"), 
                                 list(method = "update",
                                      args = list(list(y = list(temp_mean_widec$`Choa Chu Kang (South)`)), 
                                                    list(yaxis = list(title = "Temperature in Choa Chu Kang", range = c(0,40)))),label = "Choa Chu Kang"), 
                                 list(method = "update", 
                                        args = list(list(y = list(temp_mean_widec$Changi)), 
                                                    list(yaxis = list(title = "Temperature in Changi", range = c(0,40)))),label = "Changi"),
                                  list(method = "update",
                                      args = list(list(y = list(temp_mean_widec$`Tai Seng`)), 
                                                    list(yaxis = list(title = "Temperature in Tai Seng", range = c(0,40)))),label = "Tai Seng"),
                                  list(method = "update",
                                      args = list(list(y = list(temp_mean_widec$`Jurong (West)`)), 
                                                    list(yaxis = list(title = "Temperature in Jurong West", range = c(0,40)))),label = "Jurong West"), 
                                   list(method = "update", 
                                        args = list(list(y = list(temp_mean_widec$Clementi)), 
                                                    list(yaxis = list(title = "Temperature  in Clementi", range = c(0,40)))),label = "Clementi"), 
                                   list(method = "update", 
                                        args = list(list(y = list(temp_mean_widec$`Sentosa Island`)), 
                                                    list(yaxis = list(title = "Temperature  in Sentosa", range = c(0,40)))),label = "Sentosa")
                                   
                               ))))  



```

There are some missing time gaps in the data. 
Daily data for data ranging over more than 20 years is too frequent for time series forecasting. 



## Preparing for time series forecasting 

We are using changi weather station for now 

```{r}
changi <- temp %>%
  filter(station == "Changi")

glimpse(changi)
```



```{r}
changi <- changi %>%
  drop_na()%>%
  select(tdate, mean_temperature, maximum_temperature, minimum_temperature)

glimpse(changi)
```

```{r}
range(changi$tdate)
```
convert this to a time series object
ts)regular gives the time series a regular interval by adding NA values for missing dates 
na.fill function fills those missing dates by extending values from previous days 
The window() function clips off the starting and ending dates so the number of years covered is a multiple of four. This will be needed later when the data needs to be aggregated into monthly periods.



```{r}
changi_ts <- xts(changi[,c("mean_temperature", "maximum_temperature", "minimum_temperature")], order.by=as.Date(changi$tdate))
changi_ts <- ts_regular(changi_ts)
changi_ts <- na.fill(changi_ts, "extend")
changi_ts <- window(changi_ts, start = as.Date("1983-01-01"), end = as.Date("2023-12-31"))
```
Check the class of changi_ts 
```{r}

class(changi_ts)
```
```{r}
str(changi_ts)

```

A plot() of mean, max and min temperatures show the annual cycle of temperatures as well as extreme temperature events that spike above the general curve.

The ts_ts() function is used to plot ts objects rather than xts objects so that more control is available over the formatting of the charts.
```{r}
plot(ts_ts(changi_ts$maximum_temperature), col="darkred", bty="n", las=1, fg=NA, 
	ylim=c(20, 40), ylab="Temperature (C)")

lines(ts_ts(changi_ts$minimum_temperature), col="navy")

lines(ts_ts(changi_ts$mean_temperature), col="darkgreen")

grid(nx=NA, ny=NULL, lty=1, col="gray")

legend("topright", fill=c("darkred", "darkgreen", "navy"), cex=0.7,
	legend=c("MAX", "MEAN", "MIN"), bg="white")


```
### Summary Statistics 
Running the summary() function will give basic descriptive statistics for the time series fields. You can subset the time series with logical conditions to find the dates for extreme conditions.
```{r}

summary(changi_ts)

```
### Seasonal statistics 
Time series representation also facilitates summary statistics of recurring periods, like months.

The format() function with the %m format descriptor isolates the month portion of the date.
The split() function breaks a vector into a data frame with separate fields based on a specific factor, in this case the month. The as.numeric() conversion is used to remove the time series date index so that dates are not included in the summaries.
The sapply() function runs the summary() function on each field in the split data frame.
```{r}

changi_ts$MONTH <- format(index(changi_ts), "%m")

months <- split(as.numeric(changi_ts$maximum_temperature), changi_ts$MONTH)

sapply(months, summary)
```

```{r}
months <- split(as.numeric(changi_ts$minimum_temperature), changi_ts$MONTH)

sapply(months, summary)

```

```{r}
months <- split(as.numeric(changi_ts$mean_temperature), changi_ts$MONTH)

sapply(months, summary)

```


### Time Series Decomposition 

Time series decomposition separates a time series into three fundamental components that can be added together to create the original data:

A seasonal component
A long-term trend component
A random component
When using historical data to anticipate what might happen in the future, we often wish to separates the seasonal and random components to see the long term historical trends.

The stl() function performs this decomposition.
```{r}
decomposition <- stl(ts_ts(changi_ts$maximum_temperature), s.window=365, t.window = 14001)

plot(decomposition)

summary(decomposition$time.series[,"trend"])


```
in this example, the trend indicates an increase of around 0.4 degrees celsius in daily maximum temperatures over the period 1983 to 2023. We also see there is some seasonality in (dry to wet seasons) of around 2.5 degrees celsius and random daily variation of around 8 degrees. 

Note: try changing the t.window and see how this would affect! 

```{r}
decomposition = stl(ts_ts(changi_ts$minimum_temperature), s.window=365, t.window=14001)

plot(decomposition)

summary(decomposition$time.series[,"trend"])

```
```{r}
decomposition = stl(ts_ts(changi_ts$mean_temperature), s.window=365, t.window=14001)

plot(decomposition)

summary(decomposition$time.series[,"trend"])

```

### Aggregating values by months 

Although having daily weather observations is extremely useful for analysis, direct visualization of daily observations relies on inexact (and occasionally deceptive) visual identification of patterns and trends. Visualization of decomposition captures trends, but can be confusing to folks with little or no exprience with time series analysis.

One common technique to address this issue with time series data is to aggregate values by months or years.

With xts time series objects, the period.apply() function can be used to perform operations on blocks of observations across the time series. Those operations are specified with the FUN= parameter and commonly include min(), max(), and mean().
period.apply() requires a regular (even) interval between periods. Because months are uneven, a seq() of regularly spaced index values is passed to the INDEX= parameter. The INDEX value is is a regular spacing that approximates 12 months per year when leap years are considered (365 + 365 + 365 + 366 / 48 = 30.4375).
Because the periods need an even number of observations, the window() dates should be chosen so they encompass even multiples of four years to account for leap years.

```{r}
monthly.tmax <- period.apply(changi_ts$maximum_temperature, INDEX = seq(1, nrow(changi_ts) - 1, 30.4375), FUN = colMeans)

plot(ts_ts(monthly.tmax), col="darkred", ylim=c(20, 40), 
	lwd=3, bty="n", las=1, fg=NA, ylab="TMAX (C)")

grid(nx=NA, ny=NULL, lty=1)

```




# Building Models 


## Naive method 
```{r}
# create samples 
training <- window(monthly.tmax, start = as.Date('1983-01-01'), end = as.Date('2006-12-31'))
validation <- window(monthly.tmax, start = as.Date('2007-01-01'))

```

```{r}
naive_model <- snaive(ts_ts(training), h = length(ts_ts(validation)))
MAPE(naive$mean, ts_ts(validation)) * 100

naive_model
```
```{r}
plot(changi_ts_max, col="blue", xlab="Year", ylab="Daily Max Temp", main="Naive Forecast", type='l')
lines(naive_model$mean, col="red", lwd=2)

```

## State Space Models

```{r}

ets_model <- ets(ts_ts(training), allow.multiplicative.trend = TRUE)
summary(ets_model)
```

Multiplicative errors 
No trend 
Addictive seasibavbikity 

```{r}
ets_forecast <- forecast(ets_model, h=length(ts_ts(validation)))
MAPE(ets_forecast$mean, ts_ts(validation)) *100
```

```{r}
plot(changi_ts_max, col="blue", xlab="Year", ylab="Daily Max Temp", main="ETS Forecast", type='l')
lines(ets_forecast$mean, col="red", lwd=2)

```

## Holt-Winters 

```{r}
hw_model <- hw(ts_ts(training), h = length(ts_ts(validation)))
MAPE(hw_model$mean, ts_ts(validation))*100

```


## ARIMA 

```{r}

arima_optimal <- auto.arima(ts_ts(training))
summary(arima_optimal)

```

```{r}
sarima_forecast <- sarima.for(ts_ts(training), n.ahead=length(ts_ts(validation)), 
                               p=2,d=0,q=0,P=2,D=1,Q=2,S=12)
MAPE(sarima_forecast$pred, ts_ts(validation))*100
```




# Rainfall Data 
save it into rds 

## Data Wrangling 

### Check for Missing Data 

### Check Data type 

## Time Series Forecasting 

# Wind Data 
save it into rds 

## Data Wrangling 


## Time Series Forecasting 





# Shiny Dashboard Prototype - UI and Server Design 

## UI 

### Sketch 

### Details 



## Server 

### Details 







# To adjust 

```{r}
missingv <- data %>% 
  map(is.na) %>%
  map(sum) 
  
missingv <- as_tibble(missingv)

kable(missingv)

```

```{r}

# Create a data frame with missing value counts
missing.values <- data %>%
    gather(key = "key", value = "val") %>%
    mutate(is.missing = is.na(val)) %>%
    group_by(key, is.missing) %>%
    summarise(num.missing = n()) %>%
    filter(is.missing==T) %>%
    select(-is.missing) %>%
    arrange(desc(num.missing)) 

# Create a bar chart
missing.values %>%
  ggplot() +
    geom_bar(aes(x=key, y=num.missing), stat = 'identity') +
    labs(x='variable', y="number of missing values", title='Number of missing values') +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

```{r}
missing.values <- data %>%
  gather(key = "key", value = "val") %>%
  mutate(isna = is.na(val)) %>%
  group_by(key) %>%
  mutate(total = n()) %>%
  group_by(key, total, isna) %>%
  summarise(num.isna = n()) %>%
  mutate(pct = num.isna / total * 100)

levels <-
    (missing.values  %>% filter(isna == T) %>% arrange(desc(pct)))$key

percentage.plot <- missing.values %>%
      ggplot() +
        geom_bar(aes(x = reorder(key, desc(pct)), 
                     y = pct, fill=isna), 
                 stat = 'identity', alpha=0.8) +
      scale_x_discrete(limits = levels) +
      scale_fill_manual(name = "", 
                        values = c('steelblue', 'tomato3'), labels = c("Present", "Missing")) +
      coord_flip() +
      labs(title = "Percentage of missing values", x =
             'Variable', y = "% of missing values")

percentage.plot


```

```{r}
row.plot <- data %>%
  mutate(id = row_number()) %>%
  gather(-id, key = "key", value = "val") %>%
  mutate(isna = is.na(val)) %>%
  ggplot(aes(key, id, fill = isna)) +
    geom_raster(alpha=0.8) +
    scale_fill_manual(name = "",
        values = c('steelblue', 'tomato3'),
        labels = c("Present", "Missing")) +
    scale_x_discrete(limits = levels) +
    labs(x = "Variable",
           y = "Row Number", title = "Missing values in rows") +
    coord_flip()

row.plot
```










```{r}
data_nomissing <- drop_na(data)

```

Confirm that there is no missing values

```{r}

# Create a data frame with missing value counts
missing.values2 <- data_nomissing %>%
    gather(key = "key", value = "val") %>%
    mutate(is.missing = is.na(val)) %>%
    group_by(key, is.missing) %>%
    summarise(num.missing = n()) %>%
    filter(is.missing==T) %>%
    select(-is.missing) %>%
    arrange(desc(num.missing)) 

# Create a bar chart
missing.values2 %>%
  ggplot() +
    geom_bar(aes(x=key, y=num.missing), stat = 'identity') +
    labs(x='variable', y="number of missing values", title='Number of missing values') +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

select temperature data

```{r}

meantemp <- data_nomissing %>%
  select(station, year, month, day, mean_temperature) 

glimpse(meantemp)
```

```{r}

meantemp$date <- paste(meantemp$year, "-", meantemp$month, "-", meantemp$day)
glimpse(meantemp)
```

```{r}
meantemp <- meantemp %>%
  mutate(date = ymd(date))

glimpse(meantemp)
```

```{r}

unique(meantemp$station)
```
Confirm that there are no missing data

```{r}

missing.values <- temp_mean_widec %>%
  gather(key = "key", value = "val") %>%
  mutate(isna = is.na(val)) %>%
  group_by(key) %>%
  mutate(total = n()) %>%
  group_by(key, total, isna) %>%
  summarise(num.isna = n()) %>%
  mutate(pct = num.isna / total * 100)

levels <-
    (missing.values  %>% filter(isna == T) %>% arrange(desc(pct)))$key

percentage.plot <- missing.values %>%
      ggplot() +
        geom_bar(aes(x = reorder(key, desc(pct)), 
                     y = pct, fill=isna), 
                 stat = 'identity', alpha=0.8) +
      scale_x_discrete(limits = levels) +
      scale_fill_manual(name = "", 
                        values = c('steelblue', 'tomato3'), labels = c("Present", "Missing")) +
      coord_flip() +
      labs(title = "Percentage of missing values", x =
             'Variable', y = "% of missing values")

percentage.plot


```

```{r}
unique(temp_nomissing$station)
```
