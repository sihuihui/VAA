---
title: "Hands-on Exercise 7c: Analytical Mapping"
author: "Goh Si Hui"
date: 2024/02/26
date-format: long
date-modified: "last-modified"
format: html 
execute: 
  echo: true
  eval: true
  freeze: true
  warning: false
  message: false
---
# About this Exercise 

In this exercise, we will learn how to plot analytical maps.

# Getting Started 

## Installing and Loading R Packages 

For this exercise, other than tmap, we will use the following packages:

-   tidyverse for tidying and wrangling data 
-   sf for handling geospatial data 

The code chunk below uses `p_load()` of pacman package to check if the abovementioned packages are installed in the computer. If they are, they will be launched in R. Otherwise, pacman will install the relevant packages before launching them.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

pacman::p_load(tidyverse, tmap, sf)
```

## Importing the Data
For the purpose of this hands-on exercise, a prepared data set called `NGA_wp.rds` will be used. The data set is a polygon feature data.frame providing information on water point of Nigeria at the LGA level. 

We will use `read_rds()` function to import the data into R. 

```{r}
#| code-fold: true
#| code-summary: "Show the code"
nga <- read_rds("data/rds/NGA_wp.rds")
glimpse(nga)
```

# Basic Choropleth Maps

We will plot 
```{r}
total <- tm_shape(nga) +
  tm_polygons("total_wp",
              palette = "Greens",
              style = "equal",
              lwd = 0.1,
              alpha = 1) +
  tm_layout(main.title = "Distribution of All Water Points",
            main.title.size = 1,
            legend.outside = FALSE)

total
```

```{r}
functional <- tm_shape(nga) +
  tm_polygons("wp_functional",
              palette = "Blues",
              style = "equal",
              lwd = 0.1,
              alpha = 1) +
  tm_layout(main.title = "Distribution of Functional Water Points",
            main.title.size = 1,
            legend.outside = FALSE)

functional
```

```{r}
tmap_arrange(total, functional, nrow = 1)

```


# Choropleth Map for Rates 

## Deriving Proportion of Functional Water Points and Non-Functional Water Points 

```{r}
nga <- nga %>%
  mutate(pct_functional = round(wp_functional/total_wp,2)) %>%
  mutate(pct_nonfunctional = round(wp_nonfunctional/total_wp,2))

glimpse(nga)
```

```{r}
functional_rate <- tm_shape(nga) +
  tm_polygons("pct_functional",
              n = 10,
              palette = "Blues",
              style = "equal",
              lwd = 0.1,
              alpha = 1,
              legend.hist = TRUE) +
  tm_layout(main.title = "Rate Map of Functional Water Points by LGAs",
            main.title.size = 1,
            legend.outside = TRUE)

functional_rate
```

# Extreme Value Maps

## Percentile Map

### Data Preparation 

```{r}
nga <- nga %>%
  drop_na()
```


```{r}
percent <- c(0, 0.01, 0.1, 0.5, 0.9, 0.99, 1)
var <- nga["pct_functional"] %>%
  st_set_geometry(NULL)

quantile(var[,1], percent)

```

## Creating get.var function
```{r}
get.var <- function(vname, df) {
  v <- df[vname] %>%
    st_set_geometry(NULL)
  v <- unname(v[,1])
  return(v)
}

```



## Percentile Mapping Function 

```{r}

percentmap <- function(vnam, df, legtitle=NA, mtitle="Percentile Map"){
  percent <- c(0,.01,.1,.5,.9,.99,1)
  var <- get.var(vnam, df)
  bperc <- quantile(var, percent)
  tm_shape(df) +
  tm_polygons() +
  tm_shape(df) +
     tm_fill(vnam,
             title=legtitle,
             breaks=bperc,
             palette="Blues",
          labels=c("< 1%", "1% - 10%", "10% - 50%", "50% - 90%", "90% - 99%", "> 99%"))  +
  tm_borders() +
  tm_layout(main.title = mtitle, 
            title.position = c("right","bottom"))
}
```


```{r}
percentmap("total_wp", nga)
```


# Box Map

```{r}
ggplot(data = nga,
       aes(x = "",
           y = wp_nonfunctional)) +
  geom_boxplot()

``` 


```{r}
boxbreaks <- function(v,mult=1.5) {
  qv <- unname(quantile(v))
  iqr <- qv[4] - qv[2]
  upfence <- qv[4] + mult * iqr
  lofence <- qv[2] - mult * iqr
  # initialize break points vector
  bb <- vector(mode="numeric",length=7)
  # logic for lower and upper fences
  if (lofence < qv[1]) {  # no lower outliers
    bb[1] <- lofence
    bb[2] <- floor(qv[1])
  } else {
    bb[2] <- lofence
    bb[1] <- qv[1]
  }
  if (upfence > qv[5]) { # no upper outliers
    bb[7] <- upfence
    bb[6] <- ceiling(qv[5])
  } else {
    bb[6] <- upfence
    bb[7] <- qv[5]
  }
  bb[3:5] <- qv[2:4]
  return(bb)
}

``` 


```{r}
get.var <- function(vname,df) {
  v <- df[vname] %>% st_set_geometry(NULL)
  v <- unname(v[,1])
  return(v)
}

```

```{r}
var <- get.var("wp_nonfunctional", nga) 
boxbreaks(var)


``` 

```{r}
boxmap <- function(vnam, df, 
                   legtitle=NA,
                   mtitle="Box Map",
                   mult=1.5){
  var <- get.var(vnam,df)
  bb <- boxbreaks(var)
  tm_shape(df) +
    tm_polygons() +
  tm_shape(df) +
     tm_fill(vnam,title=legtitle,
             breaks=bb,
             palette="Blues",
          labels = c("lower outlier", 
                     "< 25%", 
                     "25% - 50%", 
                     "50% - 75%",
                     "> 75%", 
                     "upper outlier"))  +
  tm_borders() +
  tm_layout(main.title = mtitle, 
            title.position = c("left",
                               "top"))
}

```


```{r}
tmap_mode("view")
boxmap("wp_nonfunctional", nga)
``` 

```{r}
tmap_mode("plot")

```
