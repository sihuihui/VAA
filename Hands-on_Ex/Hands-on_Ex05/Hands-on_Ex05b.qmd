---
title: "Hands-on Exercise 5b - Visual Correlation Analysis"
author: "Goh Si Hui"
date: 2024/02/08
date-format: long
date-modified: "last-modified"
format: html 
execute: 
  echo: true
  eval: true
  warning: false
editor: visual 
---

# About this Exercise

In this exercise, we will learn how to visualise correlation matrix using R. There are 3 main sections of this exercise. First, we will learn how to create a correlation matrix using `pairs()` of R Graphics. Then we will learn how to plot corrgram using corrplot package of R. Lastly, we will create an interactive correlation matrix using plotly R.

1.  ::: {.callout-note appearance="simple"}
    ## Why use correlation matrix?

    Correlation coefficient measures the type and strength of the relationship between 2 variables. The values of a correlation coefficient ranges between -1.0 and 1.0. A correlation coefficient of 1 shows a perfect linear relationship between the two variables, while a -1.0 shows a perfect inverse relationship between the two variables. A correlation coefficient of 0.0 shows no linear relationship between the two variables.

    When we have multivariate data, the correlation coefficients are pairwise comparisons displayed in a table form, also known as correlation matrix.

    There are three main reasons for computing a correlation matrix:

    1.  To reveal the relationship between high-dimensional variables pair-wisely

    2.  To input into other analyses. For example, correlation matrices can be inputs for exploratory factor analysis, confirmatory factor analysis and linear regression when excluding missing values pairwise.

    3.  As a diagnostic when checking other analyses. For example, in linear regression, a high amount of correlation suggests that the linear regression's estimates would be unreliable.

    When the data is large, both in terms of the number of observations and the number of variables, [Corrgram](http://www.datavis.ca/papers/corrgram.pdf) tend to be used to visually explore and analyse the structure and the patterns of relations among variables. It is designed based on two main schemes:

    1.  Rendering the value of a correlation to depict its sign and magnitude, and

    2.  Reordering the variables in a correlation matrix so that “similar” variables are positioned adjacently, facilitating perception.

    We will see more of corrgram later in this exercise!
    :::

# Getting Started

Before we start, let us ensure that the required R packages have been installed and import the relevant data for this hands-on exercise.

## Installing and Loading the Packages

For this exercise, other than tidyverse , we will use the following packages:

-   [corrplot](https://cran.r-project.org/web/packages/corrplot/vignettes/corrplot-intro.html): provides a visual exploratory tool on correlation matrix that supports automatic variable reordering to help detect hidden patterns among variables.

-   [ggpub](https://rpkgs.datanovia.com/ggpubr/)r: provides some easy-to-use functions for creating and customizing ‘ggplot2’- based publication ready plots.

-   [plotly](https://plotly.com/r/): makes interactive, publication-quality graphs.

The code chunk below uses `p_load()` of **pacman** package to check if the abovementioned packages are installed in the computer. If they are, they will be launched in R. Otherwise, **pacman** will install the relevant packages before launching them.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
pacman::p_load(tidyverse, plotly, corrplot, ggpubr, DT, ggstatsplot)

```

## Importing the Data

For this exercise, we will be using the [Wine Quality Data Set](https://archive.ics.uci.edu/ml/datasets/wine+quality) of UCI Machine Learning Repository. The data set consists of 13 variables and 6497 observations. For the purpose of this exercise, we have combined the red wine and white wine data into one data file. It is called wine_quality and is in csv file format.

The following code chunk uses `read_csv()` function of **readr** package to import the data into R.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
wine <- read_csv("data/wine_quality.csv")
```

::: panel-tabset
## The Data

```{r}

datatable(wine)

```

## Checking the Data

```{r}

glimpse(wine)

```
:::

## Changing Data Type

Notice that quality should be considered a factor, rather than a numerical value, since the number represents the "level" of wine quality.

```{r}
wine$quality <- as.factor(wine$quality)
glimpse(wine)

```

Since correlation matrices are only for numerical variables, we can also create another dataframe by dropping the non-numerical variables (i.e. quality and type).

```{r}
wine2 <- wine %>% 
  select(-c(quality, type))

glimpse(wine2)

```

Now we are ready to plot the correlation matrix!

# Visualising Correlation Matrix: pairs() method

One of the methods to create a correlation matrix is to use the pairs function of R Graphics. The required input of `pairs()` can be a matrix or data frame. To create the scatterplot matrix we just need to put the dataframe into the `pairs()` function.

```{r}
pairs(wine2)

```

## Drawing Half of the Matrix

As a correlation matrix is symmetric, we can customise the pairs() function to show the upper or lower half of the matrix.

::: panel-tabset
## Lower Half of the Matrix

```{r}
pairs(wine2, upper.panel = NULL)

```

## Upper Half of the Matrix

```{r}
pairs(wine2, lower.panel = NULL)

```
:::

## Including Correlation Coefficients

For easy interpretation, we can also show the correlation coefficient of each pair of variables rather than a scatter plot by creating a panel.cor function. Higher correlations are shown in a larger font.

```{r}

panel.cor <- function (x,y, digits = 2, prefix = "", cex.cor, ...){
  usr <- par("usr")
  on.exit(par(usr))
  par(usr = c(0, 1, 0, 1))
  r <- abs(cor(x, y, use="complete.obs"))
  txt <- format(c(r, 0.123456789), digits=digits)[1]
  txt <- paste(prefix, txt, sep="")
  if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
  text(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)
}


pairs(wine2, upper.panel = panel.cor)
```

# Visualising Correlation Matrix: ggcorrmat() method

One of the major limitation of the correlation matrix is that the scatter plots appear very cluttered when the number of observations is relatively large (i.e. more than 500 observations). To over come this problem, [Corrgram](https://www.datavis.ca/papers/corrgram.pdf) data visualisation technique suggested by D. J. Murdoch and E. D. Chow (1996) and Friendly, M (2002) and will be used.

There are several R packages that provide function to plot corrgram: - corrgram - corrplot - ellipse

On top that, some R package like ggstatsplot package also provides functions for building corrgram.Now, we will learn how to visualise correlation matrix using `ggcorrmat()` function of ggstatsplot package.

## The Basic Plot

On of the advantage of using ggcorrmat() over many other methods to visualise a correlation matrix is it’s ability to provide a comprehensive and yet professional statistical report as shown below.

```{r}
ggcorrmat(wine, 
          cor.vars = 1:11)

```

## Further Customising the plot

We can further customise the correlation matrix by adding additional arguments and also include title and subtitle!

```{r}
ggcorrmat(
  data = wine, 
  cor.vars = 1:11,
  ggcorrplot.args = list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 10),
  title    = "Correlogram for wine dataset",
  subtitle = "Four pairs are no significant at p < 0.05"
)

```

::: callout-note
cor.vars: List of variables for which the correlation matrix is to be computed and visualized. If NULL (default), all numeric variables from data will be used.

gcorrplot.args: A list of additional (mostly aesthetic) arguments that will be passed to [ggcorrplot::ggcorrplot()](https://rdrr.io/cran/ggcorrplot/man/ggcorrplot.html) function. The list should avoid any of the following arguments since they are already internally being used: corr, method, p.mat, sig.level, ggtheme, colors, lab, pch, legend.title, digits.
:::

To control specific components of the plot such as the font size of x-axis, y-axis and the statistical report, we can add the following code:

```{r}
ggcorrmat(
  data = wine, 
  cor.vars = 1:11,
  ggcorrplot.args = list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 10),
  title    = "Correlogram for wine dataset",
  subtitle = "Four pairs are no significant at p < 0.05", 
  ggplot.component = list(
    theme(text=element_text(size=7),
      axis.text.x = element_text(size = 8),
      axis.text.y = element_text(size = 8)))) 

```

Notice that the font size of the axes are smaller now.

## Multiple Plots

To build facetted correlation matrix, we have to use `grouped_ggcorrmat()` of gstatsplot instead.

```{r}
grouped_ggcorrmat(
  data = wine,
  cor.vars = 1:11,
  grouping.var = type, # to have a plot for red wines and another plot for white wines
  type = "robust",
  p.adjust.method = "holm",
  plotgrid.args = list(ncol = 2),
  ggcorrplot.args = list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 10),
  annotation.args = list(
    tag_levels = "a",
    title = "Correlogram for wine dataset",
    subtitle = "The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity",
    caption = "Dataset: UCI Machine Learning Repository"
  )
)

```

::: {.callout-note appearance="simple"}
## Things to learn from the code chunk above

-   To build a facet plot, the only argument needed is `grouping.var`.

-   Behind `group_ggcorrmat()`, **patchwork** package is used to create the `multiplot. plotgrid.args` argument provides a list of additional arguments passed to `patchwork::wrap_plots`, except for guides argument which is already separately specified earlier.

-   Likewise, `annotation.args` argument is calling plot annotation arguments of patchwork package.
:::
