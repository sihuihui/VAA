---
title: "Hands-on Exercise 9"
author: "Goh Si Hui"
date: 2024/03/12
date-format: long
date-modified: "last-modified"
format: html 
execute: 
  echo: true
  eval: true
  freeze: true
  warning: false
  message: false
---

# About this Exercise 
By the end of this hands-on exercise, we will be able to:

-   create bullet chart by using ggplot2,
-   create sparklines by using ggplot2,
-   build industry standard dashboard by using R Shiny.

# Getting Started 
Before we start, let us ensure that the required R packages have been installed and import the relevant data for this hands-on exercise.

## Installing and Launching R Packages
For the purpose of this hands-on exercise, the following R packages will be used: 

-   tidyverse: to manipulate and wrangle data. 
-   lubridate: to provide us with functions to work with dates and time more efficiently. 
-   ggthemes: to provide additional themes for ggplot2 charts. 
-   gtExtras: to provide additional helper functions to assist in creating beautiful tables with [gt](https://gt.rstudio.com/). 
-   reactable: to create interactive data tables for R based on the [React Table](https://github.com/tanstack/table/tree/v7) library and made with [reactR](https://github.com/react-R/reactR). 
-   reactablefmtr: to streamline and enhance the styling of interactive reactable tables with easy-to-use and highly-customizable functions and themes.

The code chunk below uses `p_load()` of pacman package to check if the abovementioned packages are installed in the computer. If they are, they will be launched in R. Otherwise, pacman will install the relevant packages before launching them.

```{r}
pacman::p_load(lubridate, ggthemes, reactable,
reactablefmtr, gt, gtExtras, tidyverse) 
```

## Importing Microsoft Access Database 

For the purpose of this study, a personal database in Microsoft Access mdb format called `Coffee Chain` will be used.

In the code chunk below, `odbcConnectAccess()` of RODBC package is used used to import a database query table into R.

```{r}
library(RODBC)
con <- odbcConnectAccess2007('data/Coffee Chain.mdb')
coffeechain <- sqlFetch(con, 'CoffeeChain Query')
write_rds(coffeechain, "data/CoffeeChain.rds")
odbcClose(con)
```

```{r}
coffeechain <- read_rds("data/rds/CoffeeChain.rds")
```

The code chunk below is used to aggregate sales and budgeted sales at the product level.

```{r}
product <- coffeechain %>%
  group_by(`Product`) %>%
  summarise(`target` = sum(`Budget Sales`),
            `current` = sum(`Sales`)) %>%
  ungroup()
```

# Bullet Chart using ggplot2 
To create a bullet chart using ggplot2, we can make use of several `geom_col` and `geom_errorbar`. 
```{r}
ggplot(product, aes(Product, current)) + 
  geom_col(aes(Product, max(target) * 1.01),
           fill="grey85", width=0.85) +
  geom_col(aes(Product, target * 0.75),
           fill="grey60", width=0.85) +
  geom_col(aes(Product, target * 0.5),
           fill="grey50", width=0.85) +
  geom_col(aes(Product, current), 
           width=0.35,
           fill = "black") + 
  geom_errorbar(aes(y = target,
                    x = Product, 
                    ymin = target,
                    ymax= target), 
                width = .4,
                colour = "yellow",
                size = 1) +
  coord_flip()

```


# Sparklines using ggplot2
In this section, we will learn how to plot sparklines using ggplot2.

## Preparing the data
First we will prepare the data by (1) filtering those rows with Date greater or equal to 1 Jan 2013, (2) create a new column called `Month` using `month()`, (3) aggregate the sales data by `Month` and `Product`. We will need columns `Month`, `Product` and `Sales` to plot the sparklines. 

```{r}
sales_report <- coffeechain %>%
  filter(Date >= "2013-01-01") %>%
  mutate(Month = month(Date)) %>%
  group_by(Month, Product) %>%
  summarise(Sales = sum(Sales)) %>%
  ungroup() %>%
  select(Month, Product, Sales)
```

The code chunk below is used to compute the minimum, maximum and end of the the month sales.

```{r}
mins <- group_by(sales_report, Product) %>% 
  slice(which.min(Sales))
maxs <- group_by(sales_report, Product) %>% 
  slice(which.max(Sales))
ends <- group_by(sales_report, Product) %>% 
  filter(Month == max(Month))

```

The following code chunk is used to compute the 25th and 75th quantiles.

```{r}
quarts <- sales_report %>%
  group_by(Product) %>%
  summarise(quart1 = quantile(Sales, 
                              0.25),
            quart2 = quantile(Sales, 
                              0.75)) %>%
  right_join(sales_report)

```
We can now plot sparklines using `geom_ribbon`, `geom_line`, `geom_point` and `facet_grid`. 
```{r fig.width=12, fig.height=16}
ggplot(sales_report, aes(x=Month, y=Sales)) + 
  facet_grid(Product ~ ., scales = "free_y") + 
  geom_ribbon(data = quarts, aes(ymin = quart1, max = quart2), 
              fill = 'grey90') +
  geom_line(size=0.3) +
  geom_point(data = mins, col = 'red') +
  geom_point(data = maxs, col = 'blue') +
  geom_text(data = mins, aes(label = Sales), vjust = -1) +
  geom_text(data = maxs, aes(label = Sales), vjust = 2.5) +
  geom_text(data = ends, aes(label = Sales), hjust = 0, nudge_x = 0.5) +
  geom_text(data = ends, aes(label = Product), hjust = 0, nudge_x = 1.0) +
  expand_limits(x = max(sales_report$Month) + 
                  (0.25 * (max(sales_report$Month) - min(sales_report$Month)))) +
  scale_x_continuous(breaks = seq(1, 12, 1)) +
  scale_y_continuous(expand = c(0.1, 0)) +
  theme_tufte(base_size = 3, base_family = "Helvetica") +
  theme(axis.title=element_blank(), axis.text.y = element_blank(), 
        axis.ticks = element_blank(), strip.text = element_blank())

```


# Bullet Chart using gt and gtExtras 
In this section, we will learn how to prepare a bullet chart report  using functions of gt and gtExtras packages.

To create a bullet chart using gt, it is fairly straightforward as compared to using ggplot2. We will use `gt_plt_bullet` function of gt package and specify the column and target parameters. 

```{r}
product %>%
  gt::gt() %>%
  gt_plt_bullet(column = current, 
              target = target, 
              width = 60,
              palette = c("lightblue", 
                          "black")) %>%
  gt_theme_538()
```


# Sparklines using gtExtras 
Before we can prepare the sparklines for sales report by product using gtExtras functions, we need to prepare the data. 


```{r}
report <- coffeechain %>%
  mutate(Year = year(Date)) %>%
  filter(Year == "2013") %>%
  mutate (Month = month(Date, 
                        label = TRUE, 
                        abbr = TRUE)) %>%
  group_by(Product, Month) %>%
  summarise(Sales = sum(Sales)) %>%
  ungroup()

```
Note that one of the requirements of gtExtras functions is that it requires us to pass data.frame with list columns. In view of this, the code chunk below will be used to convert the report data.frame into list columns.

```{r}
report %>%
  group_by(Product) %>%
  summarize('Monthly Sales' = list(Sales), 
            .groups = "drop")

```

Now we are ready to plot the sparklines using gtExtras!

```{r}
report %>%
  group_by(Product) %>%
  summarize('Monthly Sales' = list(Sales), 
            .groups = "drop") %>%
   gt() %>%
   gt_plt_sparkline('Monthly Sales',
                    same_limit = FALSE)

```


We can also add summary statistics to the sparklines chart. First, we will calculate summary statistics for each product using the following code chunk. 

```{r}
report %>% 
  group_by(Product) %>% 
  summarise("Min" = min(Sales, na.rm = T),
            "Max" = max(Sales, na.rm = T),
            "Average" = mean(Sales, na.rm = T)
            ) %>%
  gt() %>%
  fmt_number(columns = 4,
    decimals = 2)

```


Next, we use the code chunks below to add the statistics to the sales table.

```{r}
spark <- report %>%
  group_by(Product) %>%
  summarize('Monthly Sales' = list(Sales), 
            .groups = "drop")

```


```{r}
sales <- report %>% 
  group_by(Product) %>% 
  summarise("Min" = min(Sales, na.rm = T),
            "Max" = max(Sales, na.rm = T),
            "Average" = mean(Sales, na.rm = T)
            )

```


```{r}

sales_data = left_join(sales, spark)
```
We use the following code chunk to plot data table with summary statistics and sparklines. 
```{r}

sales_data %>%
  gt() %>%
  gt_plt_sparkline('Monthly Sales',
                   same_limit = FALSE)
```

# Combining bullet chart and sparklines 

We can also combine the bullet chart and sparklines using the following steps. 

```{r}
bullet <- coffeechain %>%
  filter(Date >= "2013-01-01") %>%
  group_by(`Product`) %>%
  summarise(`Target` = sum(`Budget Sales`),
            `Actual` = sum(`Sales`)) %>%
  ungroup() 
```

```{r}
sales_data = sales_data %>%
  left_join(bullet)
```


```{r}
sales_data %>%
  gt() %>%
  gt_plt_sparkline('Monthly Sales') %>%
  gt_plt_bullet(column = Actual, 
                target = Target, 
                width = 28,
                palette = c("lightblue", 
                          "black")) %>%
  gt_theme_538()

```

# Interactive Sparklines 
In this section, you will learn how to create interactive information dashboard by using reactable and reactablefmtr packages.To build an interactive sparklines, we need to install dataui package by using the code chunk below.

```{r}
remotes::install_github("timelyportfolio/dataui")
```
Next, we load the package onto R environment using the code chunk below.
```{r}
library(dataui)

```

## Plotting Interactive Sparklines 

Similar to gtExtras, to plot an interactive sparklines by using reactablefmtr package we need to prepare the list field using the code chunk below.

```{r}

report <- report %>%
  group_by(Product) %>%
  summarize(`Monthly Sales` = list(Sales))

```

Then, we will use `react_sparkline` to plot the sparklines. 
```{r}

reactable(
  report,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(report)
    )
  )
)

```
## Changing the page size 

By default the pagesize is 10. As such, in the earlier sparkline chart, we have 2 pages for 13 rows of products. To have all 13 rows in 1 page, we use the arguments `defaultPageSize` to change the default setting.

```{r}
reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(report)
    )
  )
)

```

## Adding Points and Labels 

We can also add `highlight_points` argument to show the maximum and minimum value points and `label` argument to label the first and last values. 
```{r}
reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(
        report,
        highlight_points = highlight_points(
          min = "red", max = "blue"),
        labels = c("first", "last")
        )
    )
  )
)

```


## Adding reference line

We can also use `statline` argument to show the meanline. 

````{r}

reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(
        report,
        highlight_points = highlight_points(
          min = "red", max = "blue"),
        statline = "mean"
        )
    )
  )
)
```

## Adding Bandline
Instead adding reference line, bandline can be added using the `bandline` argument.
```{r}
reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(
        report,
        highlight_points = highlight_points(
          min = "red", max = "blue"),
        line_width = 1,
        bandline = "innerquartiles",
        bandline_color = "green"
        )
    )
  )
)

```

## Changing from Sparkline to Sparkbar 

Instead of displaying the values as sparklines, we can display them as sparkbars as shown below. 
```{r}
reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkbar(
        report,
        highlight_bars = highlight_bars(
          min = "red", max = "blue"),
        bandline = "innerquartiles",
        statline = "mean")
    )
  )
)

```

