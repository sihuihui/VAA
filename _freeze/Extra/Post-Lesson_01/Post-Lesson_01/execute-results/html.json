{
  "hash": "ab4e69e8841590e5f538d1b3fd484d14",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Post-Lesson Thoughts 1: Annotations\"\nauthor: \"Goh Si Hui\"\ndate: 2024/01/13\ndate-format: long\ndate-modified: \"last-modified\"\nformat: html \nexecute: \n  echo: true\n  eval: true\n  freeze: true\n  warning: false\n  message: false\neditor: visual \n---\n\n\n*\\[Updated with references on 16 Jan 2024\\]*\n\n# Oh no I forgot about Annotations!\n\nAfter attending my first visual analytics class and taking a peek at Lesson 2's Hands-on Exercise, I realised I did not annotate my charts!\n\n::: column-margin\nI will update Hands-on Exercise 1 with annotations soon!\n:::\n\n::: {callout-note}\nWhy is annotation important? Annotation is a crucial component of good data visualisation. It can help to conveny information and grab viewer's attention. Using keywords, shapes, colours and other visuals help them go straight to the point.\n:::\n\nNow that we have an idea how to create charts using ggplot, let us talk about how to annotate our ggplot2 charts.\n\nBased on what I read, we can add annotations using the following methods:\n\n-   Adding text with `geom_text()` or `geom_label()`\n\n-   Adding shapes, text with `annotate()`\n\n-   Adding ablines with `geom_hline()` and `geom_vline()`\n\nI will share more about each method in the following sections.\n\n# Getting Started\n\nFirst, let us import the relevant packages and data.\n\n## Import Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse)\n```\n:::\n\n\n## Import Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam_data <- read_csv(\"data/Exam_data.csv\")\n```\n:::\n\n\n# Adding text to charts using geom_text() and geom_label()\n\nText (words or numerical values) is the most common kind of annotation. It can provide more important on the important parts of the chart. Using **ggplot2**, the 2 main functions for text annotation are: `geom_text` to add a simple piece of text `geom_label` to add a label: framed text\n\n::: {callout-note}\nNote that the `annotate()` function is a good alternative and we will cover more about this function in the following section. The `annotate()` function reduces code length for simple cases.\n:::\n\n## Using geom_text()\n\nFor example, we want to find out how the students did overall for math as compared to the mean Math score. So we will first calculate the mean Math score.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_MATHS <- round(mean(exam_data$MATHS),1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam_data, aes(x = MATHS)) +\n  geom_histogram() + \n  geom_text(x = mean_MATHS, y = 20, \n            label = paste(\"mean\\n\", mean_MATHS),\n            color = \"blue\")\n```\n\n::: {.cell-output-display}\n![](Post-Lesson_01_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nNow we realised that the number is just floating around, so let us draw a line using `geom_segment`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam_data, aes(x = MATHS)) +\n  geom_histogram() + \n  geom_text(x = mean_MATHS, y = 20, \n            label = paste(\"mean\\n\", mean_MATHS),\n            color = \"blue\") + \n  geom_segment(x = mean_MATHS, xend = mean_MATHS,\n               y = 0, yend = 18, color= \"blue\")\n```\n\n::: {.cell-output-display}\n![](Post-Lesson_01_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n## Using geom_label()\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam_data, aes(x = MATHS)) +\n  geom_histogram() + \n  geom_label(x = mean_MATHS, y = 20, \n            label = paste(\"mean=\", mean_MATHS),\n            color = \"blue\", fill = \"lightblue\") + \n  geom_segment(x = mean_MATHS, xend = mean_MATHS,\n               y = 0, yend = 18, color= \"blue\")\n```\n\n::: {.cell-output-display}\n![](Post-Lesson_01_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\nCurrently `geom_label()` does not support the `check_overlap` argument or the `angle` aesthetic. Also, it is considerably slower than `geom_text()`. The `fill` aesthetic controls the background colour of the label.\n:::\n\n# Adding Shapes and Texts Using annotate()\n\nThe `annotate()` function allows us to add text and shapes on a ggplot2 chart. The first argument allow us to specify if we want to add text or a specific kind of shape. The following examples shows how to add text, line (segment) and a pointrange.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam_data, aes(x = MATHS)) +\n  geom_histogram() + \n  annotate(\"text\",\n           x= mean_MATHS, y = 20, \n           label = paste(\"mean=\", mean_MATHS),\n           color = \"blue\") + \n  annotate(\"segment\", \n           x= mean_MATHS, xend = mean_MATHS,\n           y = 0, yend = 18, color= \"blue\")\n```\n\n::: {.cell-output-display}\n![](Post-Lesson_01_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nUsing annotate() to box out an area by drawing a rectangle.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam_data, aes(x = MATHS)) +\n  geom_histogram() + \n  annotate(\"rect\",\n           xmin = 0, xmax=27, \n           ymin = 0, ymax = 10,\n           color = \"red\", fill = \"pink\", alpha=.2) \n```\n\n::: {.cell-output-display}\n![](Post-Lesson_01_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nUsing annotate to draw a point range (i.e. a point and a segment to define the range)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() + \n  annotate(\"pointrange\", x = 50, y =50, ymin= 30, ymax=70, color= \"orange\", size = 1)\n```\n\n::: {.cell-output-display}\n![](Post-Lesson_01_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n::: {callout-note}\nDue to their special nature, reference line geoms geom_abline(), geom_hline(), and geom_vline() can't be used with annotate(). You can use these geoms directory for annotations.\n:::\n\n# Adding abline with geom_hline and geom_vline\n\nAn abline is a segment that goes from 1 chart extremity to the other. `ggplot2` offers the `geom_hline()` and `geom_vline()` functions to draw hortizonal and vertical ablines.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() + \n  #hortizonal \n  geom_hline(yintercept = 50, color=\"orange\", size = 1) +\n  #vertical \n  geom_vline(xintercept = 50, color=\"orange\", size = 1)\n```\n\n::: {.cell-output-display}\n![](Post-Lesson_01_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n# Takeaways\n\nAfter exploring these methods, I realised that there are actually a lot more to learn about annotations. These examples are just scratching the surface. There are so many ways to annotate, and customise the annotations in ways which I have not thought of previously.\n\nWatch out for my future exercises as I attempt to practise my annotation skills!\n\n# References\n\n-   Holtz, Y. (n.d.-a). Annotation is Crucial for Your Dataviz. From Data to Viz. Retrieved January 14, 2024, from <https://www.data-to-viz.com/caveat/annotation.html>\n-   Holtz, Y. (n.d.-b). How to annotate a plot in ggplot2. <https://r-graph-gallery.com/233-add-annotations-on-ggplot2-chart.html>\n-   How to Compute Summary Statistics by Group in R (3 Examples). (2022, March 18). Statistics Globe. Retrieved January 14, 2024, from <https://statisticsglobe.com/summary-statistics-by-group-in-r>\n-   Johnson, A. L. (n.d.). 6 Summary Statistics \\| R Training for SSDS. <https://bookdown.org/ajohnso6/r_training_public/summary-statistics.html>\n-   Kam, T. S. (2023). R for Visual Analytics \\[Web-book\\]. <https://r4va.netlify.app/>\n-   Wickham, H., Chang, W., Henry, L., Pedersen, T. L., Takahashi, K., Wilke, C., Woo, K., Yutani, H., & Dunnington, D. (n.d.-a). Create an annotation layer â€” annotate. Ggplot2. Retrieved January 14, 2024, from <https://ggplot2.tidyverse.org/reference/annotate.html>\n-   Wickham, H., Chang, W., Henry, L., Pedersen, T. L., Takahashi, K., Wilke, C., Woo, K., Yutani, H., & Dunnington, D. (n.d.-b). Reference lines: Horizontal, vertical, and diagonal. Ggplot2. Retrieved January 14, 2024, from <https://ggplot2.tidyverse.org/reference/geom_abline.html>\n-   Wickham, H., Chang, W., Henry, L., Pedersen, T. L., Takahashi, K., Wilke, C., Woo, K., Yutani, H., & Dunnington, D. (n.d.-c). Text. Ggplot2. Retrieved January 14, 2024, from <https://ggplot2.tidyverse.org/reference/geom_text.html>\n-   Wickham, H., Navarro, D., & Pedersen, T. L. (n.d.). Annotations \\[Web-book\\]. In ggplot2: Elegant Graphics for Data Analysis (3rd ed.). <https://ggplot2-book.org/annotations>\n",
    "supporting": [
      "Post-Lesson_01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}