{
  "hash": "91e9e6177af137607175349af9519b85",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Exercise 6 - Visualing and Analysing Time-Oriented Data\"\nauthor: \"Goh Si Hui\"\ndate: 2024/02/20\ndate-format: long\ndate-modified: \"last-modified\"\nformat: html \nexecute: \n  echo: true\n  eval: true\n  freeze: true\n  warning: false\n  message: false\neditor: visual \n---\n\n\n# About this exercise\n\nIn this exercise, we will be learning how to create the following visualisations:\n\n-   a calendar heatmap using ggplot2 functions\n\n-   a cycle plot using ggplot2 function\n\n-   a slopegraph\n\n# Getting Started\n\n## Installing and Loading the Packages\n\nFor this exercise, other than tidyverse, we will use the following packages:\n\n-   [scales](https://scales.r-lib.org/)\n\n-   [viridis](https://cran.r-project.org/web/packages/viridis/index.html)\n\n-   [lubridate](https://lubridate.tidyverse.org/)\n\n-   [ggthemes](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/)\n\n-   [gridExtra](https://cran.r-project.org/web/packages/gridExtra/index.html)\n\n-   [readxl](https://readxl.tidyverse.org/)\n\n-   [knitr](https://yihui.org/knitr/)\n\n-   [data.table](https://cran.r-project.org/web/packages/data.table/vignettes/datatable-intro.html)\n\n-   [CGPfunctions](https://cran.r-project.org/web/packages/CGPfunctions/vignettes/Using-newggslopegraph.html)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\npacman::p_load(tidyverse, scales, viridis, lubridate, ggthemes, gridExtra, readxl,knitr, data.table, CGPfunctions)\n```\n:::\n\n\n# Calendar Heatmap\n\nIn this section, we will learn how to plot a calender heatmap programmatically using ggplot2 package.\n\n## Importing the Data\n\nFor the purpose of this hands-on exercise, `eventlog.csv` file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\nFirst, we will use the code chunk below to import `eventlog.csv` file into R environment and called the data frame as attacks.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nattacks <- read_csv(\"data/eventlog.csv\")\n```\n:::\n\n\n## Examining the Data Structure\n\nWe will use `kable()` to review the structure of the imported data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nkable(head(attacks))\n```\n\n::: {.cell-output-display}\n\n\n|timestamp           |source_country |tz              |\n|:-------------------|:--------------|:---------------|\n|2015-03-12 15:59:16 |CN             |Asia/Shanghai   |\n|2015-03-12 16:00:48 |FR             |Europe/Paris    |\n|2015-03-12 16:02:26 |CN             |Asia/Shanghai   |\n|2015-03-12 16:02:38 |US             |America/Chicago |\n|2015-03-12 16:03:22 |CN             |Asia/Shanghai   |\n|2015-03-12 16:03:45 |CN             |Asia/Shanghai   |\n\n\n:::\n:::\n\n\nFrom the above output, we see there there are three columns in the `attack` dataset: `timestamp`, `source_country` and `tz`.\n\n-   timestamp: stores datetime vales in POSIXct format\n-   source_country: stores the source of the attack. It is in ISO 3166-1 alpha-2 country code\n-   tz: stores time zone of the source IP address.\n\n## Data Preparation\n\n### Step 1\n\nBefore we can plot the calendar heatmap, we need to derive two new fields: `wkday` and `hour` using a function. To get the hour function, we will make use of `hour()` from **lubridate** package. To get the `wkday` field, we will make use of `weekdays()`, which is a base R function.\n\n::: panel-tabset\n## Method 1: Using lubridate and base R function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_hr_wkday <- function(ts,sc,tz){\n  real_times <- ymd_hms(ts,\n                        tz = tz[1],\n                        quiet = TRUE)\n  \n  dt <- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n}\n```\n:::\n\n\n::: callout-note\n## About the code chunk\n\n-   `ymd_hms()` and `hour()` are from lubridate package.\n\n    -   Note! before using ymd_hms(), we should examine the date/time format on our laptops. The date/time format on our laptops should be yyyy-mm-dd hh:mm:ss before using ymd_hms(). If the print date/time format is different, then we should either (1) use different function or (2) change the date/time format of our computer.\n\n-   `weekdays()` is a base R function.\n:::\n\n## Method 2: Using lubridate package\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattacks1 <- attacks %>%\n  mutate(wkday = lubridate:: wday(timestamp,\n                       label = TRUE,\n                      abbr = FALSE, # to display the day of the week \n                       week_start = 7), #Sun is the first level \n         hr = hour(timestamp))\n```\n:::\n\n\n::: callout-note\n## About the code chunk\n\n-   `hour()` and `wday()` are from lubridate package.\n\n    -   Note: these two functions are relatively more efficient than Base R function.\n:::\n:::\n\n### Step 2\n\nWe will now derive the attacks tibble data frame using the following code chunk.\n\n::: panel-tabset\n## Method 1\n\nAfter creating the function in earlier section, we will now use it to derive the `wkday` and `hour` columns. After that we will also use `mutate()` to convert `wkday` and `hour` fields into factor so that they will be ordered when plotting.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwkday_levels <- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks2 <- attacks %>%\n  group_by(tz) %>%\n  do(make_hr_wkday(.$timestamp,\n                   .$source_country,\n                   .$tz)) %>%\n  ungroup() %>%\n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour = factor(hour, levels = 0:23))\n```\n:::\n\n\n## Method 2\n\nUsing the `attacks1` dataframe from previous section's method 2, we will just select the columns that we want and convert the `wkday` and `hr` columns into factors using `as.factor()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattacks3 <- attacks1 %>%\n  select(tz, source_country, wkday, hr)\n\nattacks3$wkday <- as.factor(attacks3$wkday)\n\nattacks3$hr <- as.factor(attacks3$hr)\n```\n:::\n\n:::\n\n### Step 3 - Building Calendar Heatmaps\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrouped <- attacks2 %>%\n  count(wkday, hour) %>%\n  ungroup %>%\n  na.omit()\n\nggplot(grouped,\n       aes(hour, \n           wkday, \n           fill = n)) +\n  geom_tile(color = \"white\", \n            size = 0.1) +\n  \n  theme_tufte(base_family = \"sans serif\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"lavender\", \n                    high = \"maroon4\") +\n  labs(x = NULL, \n       y = NULL, \n       title = \"Attacks by Weekday and Time of Day\") +\n  \n  theme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n## About the code chunk\n\n-   A tibble data table called `grouped` is derived by aggregating the attack by `wkday` and `hour` fields\n-   A new field called `n` is derived by using `group_by()` and `count()` functions.\n-   `na.omit()` is used to exclude missing value.\n-   `geom_tile()` is used to plot tiles(grids) at each x and y positions. `color` and `size` arguments are used to specify the border color and line size of the tiles. In this case, the border color is white and the line size is 0.1.\n-   `theme_tufte()` of ggthemes package is used to remove unnecessary chart junk.\n-   `coord_equal()` is used to ensure the plot will have an aspect ratio of 1:1\n-   `scale_fill_gradient()` function is used to create a two color gradient (low-high)\n:::\n\n## Plotting Multiple Calendar Heatmaps\n\nWe can also plot multiple calendar heatmaps for the top four countries with the highest number of attacks.\n\n### Step 1: Deriving Attack by Country Object\n\nFirst we need to identify the top 4 countries with the highest number of attacks: - count the number of attacks by country - calculate the percent of attacks by country, and - save the results in a tibble data frame\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattacks_by_cty <- count(\n  attacks, source_country) %>%\n  mutate(percent = percent(n/sum(n))) %>%\n  arrange(desc(n))\n```\n:::\n\n\n### Step 2: Preparing the tidy data frame\n\nNow we will extract the attack records of the top 4 countries from `attacks2`data frame. Then save the data in a new tibble data frame (i.e. top4_attacks).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop4 <- attacks_by_cty$source_country[1:4]\n\ntop4_attacks <- attacks2 %>%\n  filter(source_country %in% top4) %>%\n  count(source_country, wkday, hour) %>%\n  ungroup() %>%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %>%\n  na.omit()\n```\n:::\n\n\n### Step 3: Plotting the Multiple Calendar Heatmap using ggplot2 package\n\nNow, we are ready to plot multiple calendar heatmap!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# New facet label names\ncty.labs <- c(\"CHINA\", \"UNITED STATES\", \"KOREA\", \"NETHERLANDS\")\nnames(cty.labs) <- c(\"CN\", \"US\", \"KR\", \"NL\")\n\n\n#baseplot \nggplot(top4_attacks,\n       aes(hour,\n           wkday,\n           fill = n)) +\n  geom_tile(color = \"white\",\n            size = 0.1) +\n  theme_tufte(base_family = \"sans serif\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"grey80\", \n                    high = \"maroon4\") +\n  #plot for each country using facet_wrap \n  facet_wrap(~source_country, ncol = 2, \n             labeller = labeller(source_country = cty.labs)) + \n  labs(x = NULL, y = NULL,\n       title = \"Attacks on Top 4 Countries by Weekday and Time of Day\") + \n   theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n# Cycle Plot\n\nIn this section, we will learn how to plot a cycle plot showing the time-series patterns and trend of visitor arrivals from Vietnam programmatically using ggplot2 functions.\n\n::: callout-note\n## Why use Cycle Plot?\n\nA Cycle Plot is used when we want to visualize how a trend, or a cycle correlated with the day-of-the-week or the month-of-the-year evolved. A Cycle Plot is made to capture visually how certain values have advanced over a period. This type of chart is especially useful for identifying certain intervals or periods in which the best results are recorded.\n\n[Source](https://btprovider.com/cycle-plot-tableau/#:~:text=A%20Cycle%20Plot%20is%20made,the%20best%20results%20are%20recorded.)\n:::\n\n## Importing the Data\n\nFor the purpose of this hands-on exercise, `arrivals_by_air.xlsx` will be used.\n\nFirst, we will use the code chunk below to import `arrivals_by_air.xlsx` file into R environment and call the tibble data frame as `air`.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nair <- read_excel(\"data/arrivals_by_air.xlsx\")\nkable(head(air))\n```\n\n::: {.cell-output-display}\n\n\n|Month-Year | Republic of South Africa| Canada|   USA| Bangladesh| Brunei| China| Hong Kong SAR (China)| India| Indonesia| Japan| South Korea| Kuwait| Malaysia| Myanmar| Pakistan| Philippines| Saudi Arabia| Sri Lanka| Taiwan| Thailand| United Arab Emirates| Vietnam| Belgium & Luxembourg|  CIS| Finland| France| Germany| Ireland| Italy| Netherlands| Spain| Switzerland| United Kingdom| Australia| New Zealand|\n|:----------|------------------------:|------:|-----:|----------:|------:|-----:|---------------------:|-----:|---------:|-----:|-----------:|------:|--------:|-------:|--------:|-----------:|------------:|---------:|------:|--------:|--------------------:|-------:|--------------------:|----:|-------:|------:|-------:|-------:|-----:|-----------:|-----:|-----------:|--------------:|---------:|-----------:|\n|2000-01-01 |                     3291|   5545| 25906|       2883|   3749| 33895|                 13692| 19235|     65151| 59288|       21457|    507|    27472|    1177|     2150|        8404|         1312|      3922|  15766|    12048|                 1318|    1527|                 1434| 2703|    1634|   4752|   12739|    1292|  3544|        4962|   925|        3731|          28986|     34616|        5034|\n|2000-02-01 |                     2357|   6120| 28262|       2469|   3236| 34344|                 19870| 18975|     37105| 58188|       19634|    199|    29084|    1161|     2496|        9128|          623|      3988|  24861|    12745|                  899|    2269|                 1596| 1182|    1297|   6391|   13093|    1200|  2897|        5054|   747|        3980|          35148|     26030|        3938|\n|2000-03-01 |                     4036|   6255| 30439|       2904|   3342| 27053|                 17086| 21049|     44205| 74426|       20719|    386|    30504|    1355|     2429|       11691|         1578|      4259|  18767|    16971|                 1474|    2034|                 1548| 1088|    1220|   5528|   13645|    1368|  2717|        4950|   935|        3576|          36117|     31119|        4668|\n|2000-04-01 |                     4241|   4521| 25378|       2843|   5117| 30464|                 22346| 26160|     45480| 49985|       17489|    221|    34478|    1593|     2711|       14141|          705|      6579|  22735|    20397|                 1284|    2420|                 1592| 1012|    1208|   5544|   13366|    1345|  2512|        4149|   941|        3850|          33792|     34824|        6890|\n|2000-05-01 |                     2841|   3914| 26163|       2793|   4152| 30775|                 16357| 35869|     38350| 48937|       19398|    164|    34795|    1397|     2594|       13305|          679|      4625|  18399|    15769|                 1042|    1833|                 1167|  660|     743|   4225|   10878|    1067|  2205|        3643|   764|        3025|          23377|     33139|        7006|\n|2000-06-01 |                     2776|   3487| 28179|       3146|   5018| 26720|                 18133| 31314|     47982| 53798|       17522|    440|    34660|    1715|     2924|       10555|         2749|      4740|  21042|    17217|                 1545|    2480|                 1170|  712|     982|   4047|    9054|    1363|  2196|        3544|   855|        2580|          21769|     35731|        7634|\n\n\n:::\n:::\n\n\n## Deriving month and year fields\n\nWe will now derive two new fields `month` and `year` from the `Month-Year` field.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nair$month <- factor(month(air$`Month-Year`),\n                    levels = 1:12,\n                    labels = month.abb,\n                    ordered = TRUE)\n\nair$year <- year(ymd(air$`Month-Year`))\n\nkable(head(air))\n```\n\n::: {.cell-output-display}\n\n\n|Month-Year | Republic of South Africa| Canada|   USA| Bangladesh| Brunei| China| Hong Kong SAR (China)| India| Indonesia| Japan| South Korea| Kuwait| Malaysia| Myanmar| Pakistan| Philippines| Saudi Arabia| Sri Lanka| Taiwan| Thailand| United Arab Emirates| Vietnam| Belgium & Luxembourg|  CIS| Finland| France| Germany| Ireland| Italy| Netherlands| Spain| Switzerland| United Kingdom| Australia| New Zealand|month | year|\n|:----------|------------------------:|------:|-----:|----------:|------:|-----:|---------------------:|-----:|---------:|-----:|-----------:|------:|--------:|-------:|--------:|-----------:|------------:|---------:|------:|--------:|--------------------:|-------:|--------------------:|----:|-------:|------:|-------:|-------:|-----:|-----------:|-----:|-----------:|--------------:|---------:|-----------:|:-----|----:|\n|2000-01-01 |                     3291|   5545| 25906|       2883|   3749| 33895|                 13692| 19235|     65151| 59288|       21457|    507|    27472|    1177|     2150|        8404|         1312|      3922|  15766|    12048|                 1318|    1527|                 1434| 2703|    1634|   4752|   12739|    1292|  3544|        4962|   925|        3731|          28986|     34616|        5034|Jan   | 2000|\n|2000-02-01 |                     2357|   6120| 28262|       2469|   3236| 34344|                 19870| 18975|     37105| 58188|       19634|    199|    29084|    1161|     2496|        9128|          623|      3988|  24861|    12745|                  899|    2269|                 1596| 1182|    1297|   6391|   13093|    1200|  2897|        5054|   747|        3980|          35148|     26030|        3938|Feb   | 2000|\n|2000-03-01 |                     4036|   6255| 30439|       2904|   3342| 27053|                 17086| 21049|     44205| 74426|       20719|    386|    30504|    1355|     2429|       11691|         1578|      4259|  18767|    16971|                 1474|    2034|                 1548| 1088|    1220|   5528|   13645|    1368|  2717|        4950|   935|        3576|          36117|     31119|        4668|Mar   | 2000|\n|2000-04-01 |                     4241|   4521| 25378|       2843|   5117| 30464|                 22346| 26160|     45480| 49985|       17489|    221|    34478|    1593|     2711|       14141|          705|      6579|  22735|    20397|                 1284|    2420|                 1592| 1012|    1208|   5544|   13366|    1345|  2512|        4149|   941|        3850|          33792|     34824|        6890|Apr   | 2000|\n|2000-05-01 |                     2841|   3914| 26163|       2793|   4152| 30775|                 16357| 35869|     38350| 48937|       19398|    164|    34795|    1397|     2594|       13305|          679|      4625|  18399|    15769|                 1042|    1833|                 1167|  660|     743|   4225|   10878|    1067|  2205|        3643|   764|        3025|          23377|     33139|        7006|May   | 2000|\n|2000-06-01 |                     2776|   3487| 28179|       3146|   5018| 26720|                 18133| 31314|     47982| 53798|       17522|    440|    34660|    1715|     2924|       10555|         2749|      4740|  21042|    17217|                 1545|    2480|                 1170|  712|     982|   4047|    9054|    1363|  2196|        3544|   855|        2580|          21769|     35731|        7634|Jun   | 2000|\n\n\n:::\n:::\n\n\n## Extracting the target country\n\nNext, we will extract the data for the target country (i.e. Vietnam) and data beyond year 2010 using the following code chunk.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nviet <- air %>% \n  select(Vietnam, month, year) %>%\n  filter(year >= 2010)\n```\n:::\n\n\n## Computing year average arrivals by month\n\nNow we will use `group_by()` and `summarise()` of dplyr to compute average arrivals by month across all years.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhline.data <- viet %>%\n  group_by(month) %>%\n  summarise(avgvalue = mean(Vietnam))\n```\n:::\n\n\n## Plotting the cycle plot\n\nTo plot a cycle plot for each month, we will make use of `geom_line()` to plot the number of visitors in each year for every month. Then, we will use `geom_hline()`to plot out the \"average value\" for each month. To have a chart for every month, we will make use of `facet_grid()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_line(data = viet,\n            aes(x = year,\n                y = `Vietnam`,\n                group = month),\n            color = \"black\") +\n  geom_hline(aes(yintercept =avgvalue),\n             data = hline.data,\n             linetype = 6,\n             color = \"red\",\n             size = 0.5) +\n  facet_grid(~month) + \n  labs(axis.text.x = element_blank(),\n       title = \"Visitor Arrivals from Vietnam by Air, Jan 2010 - Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\") +\n  theme_minimal() +\n  scale_x_binned(guide = guide_axis(angle = 45)) +\n  theme(axis.text.x = element_text(size = rel(0.75)))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-16-1.png){width=1440}\n:::\n:::\n\n\n# Slopegraph\n\nIn this section, we will learn how to plot a slopegraph using the package CGPfunctions.\n\n::: callout-note\n## Why do we use slopegraph?\n\nWhen we use slopegraphs, we are trying to show the amount of change and the direction of change between two data points. - The steeper the slope, the bigger the change; and, if one thing is going up more dramatically than its neighbors, a slopegraph will make that easier to see than a traditional line graph would.\n\n[Source](https://www.storytellingwithdata.com/blog/2020/7/27/what-is-a-slopegraph)\n:::\n\n## Importing the Data\n\nFor the purpose of this hands-on exercise, \\`rice.csv\\`\\` will be used.\n\nFirst, we will use the code chunk below to import `rice.csv` file into R environment and call the tibble data frame as \\`rice\\`\\`.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nrice <- read_csv(\"data/rice.csv\")\nkable(head(rice))\n```\n\n::: {.cell-output-display}\n\n\n|Country | Year| Yield| Production|\n|:-------|----:|-----:|----------:|\n|China   | 1961| 20787|   56217601|\n|China   | 1962| 23700|   65675288|\n|China   | 1963| 26833|   76439280|\n|China   | 1964| 28289|   85853780|\n|China   | 1965| 29667|   90705630|\n|China   | 1966| 31445|   98403990|\n\n\n:::\n:::\n\n\n## Plotting the slopegraph\n\nLet us convert the `Year` to a factor so that the years will be arranged in levels. Then we filter the rows where the Years are 1961 and 1980.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nrice <- rice %>%\n  mutate(Year = factor(Year)) %>%\n  filter(Year %in% c(1961, 1980)) \n\nglimpse(rice)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 22\nColumns: 4\n$ Country    <chr> \"China\", \"China\", \"India\", \"India\", \"Indonesia\", \"Indonesia…\n$ Year       <fct> 1961, 1980, 1961, 1980, 1961, 1980, 1961, 1980, 1961, 1980,…\n$ Yield      <dbl> 20787, 41435, 15419, 20002, 17623, 32928, 48793, 51279, 414…\n$ Production <dbl> 56217601, 142876520, 53494500, 80312000, 12084000, 29651900…\n```\n\n\n:::\n:::\n\n\nUsing the filtered data, we will plot the slopegraph using `newggslopegraph()`. We will indicate the `dataframe` argument as `rice`, which is the tibble dataframe that we have prepared in the earlier step. The `Times` argument refers to the column inside the dataframe that will be plotted on the x axis. Traditionally this `Times` argument is some measure of time. However, `newggslopegraph()` accepts a column of class ordered, factor or character. The `Measurement` argument refers to the column inside the dataframe that will be plotted on the y axis. Traditionally this `Measurement` argument is some measure such as a percentage. Currently, the function accepts a column of type integer or number. The `Grouping` argument refers to a column inside the dataframe that will be used to group and distinguish measurements.\n\n::: callout-note\n## About the code chunk\n\nIn the following code chunk we also: - Added a title using the argument `Title`. Note that `Title = \"\"` will provide an empty title but retain the spacing. - Added a subtitle using the argument `SubTitle`. Note that `SubTitle = \"\"` will provide and empty title but retain the spacing. - Added a caption using the argument `Caption`. Note that `Caption = \"\"` will provide and empty title but retain the spacing. - tried to space out the data labels by adjusting the `DataLabelPadding` argument. - changed the theme to `wsj` using `ThemeChoice` argument.Note that by default ThemeChoice is set to \"bw\" and the other choices are \"ipsum\", \"econ\", \"wsj\", \"gdocs\", and \"tufte\".\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnewggslopegraph(dataframe = rice,\n                Times = Year, \n                Measurement = Yield, \n                Grouping = Country,\n                Title = \"Rice Yield of Top 11 Asian Countries\",\n                SubTitle = \"1961 - 1980\",\n                Caption = \"Prepared by: Goh Si Hui\",\n                DataLabelPadding = 0.07,\n                ThemeChoice = \"wsj\"\n                )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n# Reference\n\nKam, T. S. (2023). R for Visual Analytics \\[Web-book\\]. https://r4va.netlify.app/.\n",
    "supporting": [
      "Hands-on_Ex06_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}