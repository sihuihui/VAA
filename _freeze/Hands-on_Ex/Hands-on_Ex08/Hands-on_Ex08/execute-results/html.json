{
  "hash": "4ae03e81d6e59c8f5355060bdbda1628",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 8: Modelling, Visualising and Analysing Network data with R\"\nauthor: \"Goh Si Hui\"\ndate: 2024/03/03\nexecute: \n  echo: true\n  eval: true\n  freeze: true\n  warning: false\n  message: false\n---\n\n\n# About this Exercise\n\nIn this hands- on exercise, we will learn how to model, analyse and visualise network data using R. In particular, we will learn how to:\n\n-   create graph object data frames, manipulate them using appropriate functions of **dplyr**, **lubridate** and **tidygraph,**\n-   build network visualisation using appropriate functions of **ggraph,**\n-   compute network geometrics using **tidygraph**,\n-   build advanced graph visualisation by incorporating the network geometrics, and\n-   build interactive network visualisation using **visNetwork** package.\n\n# Getting Started\n\nBefore we start, let us ensure that the required R packages have been installed and import the relevant data for this hands-on exercise.\n\n## Installing and Loading R Packages\n\nFor this exercise, other than tidyverse and lubridate, we will use the following packages:\n\n-   [igraph](https://r.igraph.org/):Routines for simple graphs and network analysis. It can handle large graphs very well and provides functions for generating random and regular graphs, graph visualization, centrality methods and much more.\n\n-   [tidygraph](https://tidygraph.data-imaginist.com/):provides a tidy API for graph/network manipulation. \n\n-   [ggraph](https://ggraph.data-imaginist.com/):an extension of ggplot2 aimed at supporting relational data structures such as networks, graphs, and trees.\n\n-   [visNetwork](https://datastorm-open.github.io/visNetwork/):for network visualization, using vis.js javascript library\n\nThe code chunk below uses p_load() of pacman package to check if the abovementioned packages are installed in the computer. If they are, they will be launched in R. Otherwise, pacman will install the relevant packages before launching them.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, lubridate, igraph, tidygraph, ggraph, visNetwork)\n```\n:::\n\n\n## Importing Data into R\nThe data sets used in this hands-on exercise are from an oil exploration and extraction company. There are two data sets: one data set contains the nodes data and the other contains the edges (also know as link) data. We will import them using `read_csv()` of **readr** package. \n\n:::{.panel-tabset}\n## node \n\n::: {.cell}\n\n```{.r .cell-code}\nnode <- read_csv(\"data/GAStech_email_node.csv\")\nhead(node)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n     id label               Department     Title                                \n  <dbl> <chr>               <chr>          <chr>                                \n1     1 Mat.Bramar          Administration Assistant to CEO                     \n2     2 Anda.Ribera         Administration Assistant to CFO                     \n3     3 Rachel.Pantanal     Administration Assistant to CIO                     \n4     4 Linda.Lagos         Administration Assistant to COO                     \n5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Manag…\n6     6 Carla.Forluniau     Administration Assistant to IT Group Manager        \n```\n\n\n:::\n:::\n\nGAStech_email_nodes.csv consist of the name, department and title of the employees.\n\n## edge \n\n::: {.cell}\n\n```{.r .cell-code}\nedge <- read_csv(\"data/GAStech_email_edge-v2.csv\")\nhead(edge)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 8\n  source target SentDate SentTime Subject    MainSubject sourceLabel targetLabel\n   <dbl>  <dbl> <chr>    <time>   <chr>      <chr>       <chr>       <chr>      \n1     43     41 6/1/2014 08:39    GT-Seismi… Work relat… Sven.Flecha Isak.Baza  \n2     43     40 6/1/2014 08:39    GT-Seismi… Work relat… Sven.Flecha Lucas.Alca…\n3     44     51 6/1/2014 08:58    Inspectio… Work relat… Kanon.Herr… Felix.Resu…\n4     44     52 6/1/2014 08:58    Inspectio… Work relat… Kanon.Herr… Hideki.Coc…\n5     44     53 6/1/2014 08:58    Inspectio… Work relat… Kanon.Herr… Inga.Ferro \n6     44     45 6/1/2014 08:58    Inspectio… Work relat… Kanon.Herr… Varja.Lagos\n```\n\n\n:::\n:::\n\nGAStech-email_edges.csv consists of emails correspondances between the employees.\n:::\n\n\n# Data Checks \nWe will now examine the structure of the data frame using `glimpse()` of **dplyr**. \n\n:::{.panel-tabset}\n## node \n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(node)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 54\nColumns: 4\n$ id         <dbl> 1, 2, 3, 4, 5, 6, 7, 44, 45, 46, 8, 9, 10, 11, 12, 13, 14, …\n$ label      <chr> \"Mat.Bramar\", \"Anda.Ribera\", \"Rachel.Pantanal\", \"Linda.Lago…\n$ Department <chr> \"Administration\", \"Administration\", \"Administration\", \"Admi…\n$ Title      <chr> \"Assistant to CEO\", \"Assistant to CFO\", \"Assistant to CIO\",…\n```\n\n\n:::\n:::\n\n\n## edge \n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(edge)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 9,063\nColumns: 8\n$ source      <dbl> 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      <dbl> 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    <chr> \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    <time> 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     <chr> \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject <chr> \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel <chr> \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel <chr> \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n```\n\n\n:::\n:::\n\n:::\n\n:::{.callout-note}\n## Observations\n-   From the node table, we see that each employee is given an `id`, which is then used as the `source` and `target` for the edge table. \n\n-   the edge table's `SentDate` consists of date but it is treated as characters. We should change it to date data type. \n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedge <- edge %>%\n  mutate(SentDate = dmy(SentDate)) %>%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\nglimpse(edge)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 9,063\nColumns: 9\n$ source      <dbl> 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      <dbl> 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    <date> 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-0…\n$ SentTime    <time> 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     <chr> \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject <chr> \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel <chr> \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel <chr> \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n$ Weekday     <ord> Monday, Monday, Monday, Monday, Monday, Monday, Monday, Mo…\n```\n\n\n:::\n:::\n\n\n:::{.callout-note}\n## Observations\n-   `SentDate` is now a Date data type after we use `dmy()` to transform the `SentDate`.\n\n-   A new column `Weekday` has been created using `wday()`, which returns the day of the week as a decimal number or an ordered factor if label is TRUE. The argument abbr is FALSE keep the daya spells in full, i.e. Monday. \n\n:::\n\nA close examination of edge data frame reveals that it consists of individual e-mail flow records. This is not very useful for visualisation.Hence, we will aggregate the individual by date, senders, receivers, main subject and day of the week. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nedge_aggregated <- edge %>%\n  filter(MainSubject == \"Work related\") %>%\n  group_by(source, target, Weekday) %>%\n  summarise(Weight = n()) %>%\n  filter(source != target) %>%\n  filter(Weight > 1) %>%\n  ungroup()\n\nglimpse(edge_aggregated)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1,456\nColumns: 4\n$ source  <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  <dbl> 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7,…\n$ Weekday <ord> Monday, Tuesday, Wednesday, Friday, Monday, Tuesday, Wednesday…\n$ Weight  <int> 4, 3, 5, 8, 4, 3, 5, 8, 4, 3, 5, 8, 4, 3, 5, 8, 4, 3, 5, 8, 4,…\n```\n\n\n:::\n:::\n\n\n:::{.callout-note}\n## Observations\n-   We filtered those \"Work related\" emails using `MainSubject`. Then perform group_by using the source, target and Weekday. Then we create a new field `Weight` by counting the number of emails resulting from the group_by. We also remove those emails where the source and target are the same employees and those weights that are less than 1 to get the resultant table `edge_aggregated`. \n:::\n\n\n# Creating network objects using tidygraph \n\nIn this section, we will learn how to create a graph data model by using tidygraph package. It provides a tidy API for graph/network manipulation. While network data itself is not tidy, it can be envisioned as two tidy tables, one for node data and one for edge data. tidygraph provides a way to switch between the two tables and provides dplyr verbs for manipulating them. Furthermore it provides access to a lot of graph algorithms with return values that facilitate their use in a tidy workflow.\n\n## tbl_graph object \nGraphs and networks can come from many sources, or be created by simulation or deterministacally. Tidygraph provides conversions from all well-known structures in R, as well as a range of create_() and play_*() functions for creating well-defined or simulated graphs.\n\nWe can make use of `tbl_graph()` and `as_tbl_graph()` to create network objects. \n\n-   `tbl_graph()` creates a tbl_graph network object from nodes and edges data. \n-   `as_tbl_graph()` converts network data and objects to a tbl_graph network. Below are network data and objects supported by `as_tbl_graph()`\n\n  -   a node data.frame and an edge data.frame,\n  -   data.frame, list, matrix from base,\n  -   igraph from igraph,\n  -   network from network,\n  -   dendrogram and hclust from stats,\n  -   Node from data.tree,\n  -   phylo and evonet from ape, and\n  -   graphNEL, graphAM, graphBAM from graph (in Bioconductor).\n\n## dplyr verbs in tidygraph\n-   `activate()` verb from tidygraph serves as a switch between tibbles for nodes and edges. All dplyr verbs applied to tbl_graph object are applied to the active tibble.\n-   `.N()` function is used to gain access to the node data while manipulating the edge data.\n-   `.E()` function is used to gain access to the edge data. \n-   `.G()` function is used to give us the tbl_graph object itself. \n\n## Building tidygraph data model \nIn this section, we will use `tbl_graph()` of tinygraph package to build an tidygraph’s network graph data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph <- tbl_graph(nodes = node,\n                   edges = edge_aggregated,\n                   directed = TRUE)\n\ngraph \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tbl_graph: 54 nodes and 1456 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 54 × 4 (active)\n      id label               Department     Title                               \n   <dbl> <chr>               <chr>          <chr>                               \n 1     1 Mat.Bramar          Administration Assistant to CEO                    \n 2     2 Anda.Ribera         Administration Assistant to CFO                    \n 3     3 Rachel.Pantanal     Administration Assistant to CIO                    \n 4     4 Linda.Lagos         Administration Assistant to COO                    \n 5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Mana…\n 6     6 Carla.Forluniau     Administration Assistant to IT Group Manager       \n 7     7 Cornelia.Lais       Administration Assistant to Security Group Manager \n 8    44 Kanon.Herrero       Security       Badging Office                      \n 9    45 Varja.Lagos         Security       Badging Office                      \n10    46 Stenig.Fusil        Security       Building Control                    \n# ℹ 44 more rows\n#\n# Edge Data: 1,456 × 4\n   from    to Weekday   Weight\n  <int> <int> <ord>      <int>\n1     1     2 Monday         4\n2     1     2 Tuesday        3\n3     1     2 Wednesday      5\n# ℹ 1,453 more rows\n```\n\n\n:::\n:::\n\n\n:::{.callout-note}\n## Observations\n-   The output above reveals that GAStech_graph is a tbl_graph object with 54 nodes and 4541 edges.\n-   The command also prints the first six rows of “Node Data” and the first three of “Edge Data”.\n-   It states that the Node Data is active. The notion of an active tibble within a tbl_graph object makes it possible to manipulate the data in one tibble at a time.\n\n:::\n\n## Changing the active object \nThe nodes tibble data frame is activated by default, but you can change which tibble data frame is active with the activate() function. Thus, if we wanted to rearrange the rows in the edges tibble to list those with the highest “weight” first, we could use activate() and then arrange().\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph %>% \n  activate(edges) %>%\n  arrange(desc(Weight))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tbl_graph: 54 nodes and 1456 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 1,456 × 4 (active)\n    from    to Weekday   Weight\n   <int> <int> <ord>      <int>\n 1    40    41 Tuesday       23\n 2    40    43 Tuesday       19\n 3    41    43 Tuesday       15\n 4    41    40 Tuesday       14\n 5    42    41 Tuesday       13\n 6    42    40 Tuesday       12\n 7    42    43 Tuesday       11\n 8    43    42 Wednesday     11\n 9    36    32 Wednesday      9\n10    40    41 Monday         9\n# ℹ 1,446 more rows\n#\n# Node Data: 54 × 4\n     id label           Department     Title           \n  <dbl> <chr>           <chr>          <chr>           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# ℹ 51 more rows\n```\n\n\n:::\n:::\n\n\n# Plotting Static Network Graphs using ggraph \n\nggraph is an extension of ggplot2, making it easier to carry over basic ggplot skills to the design of network graphs.\n\nAs in all network graph, there are three main aspects to a ggraph’s network graph, they are:\n\n-   The Layout defines how nodes are placed on the plot, that is, it is a conversion of the relational structure into an x and y value for each node in the graph. ggraph has access to all layout functions available in igraph and furthermore provides a large selection of its own, such as hive plots, treemaps, and circle packing.\n-   The Nodes are the connected entities in the relational structure. These can be plotted using the geom_node_*() family of geoms. Some node geoms make more sense for certain layouts, e.g. geom_node_tile() for treemaps and icicle plots, while others are more general purpose, e.g. geom_node_point().\n-   The Edges are the connections between the entities in the relational structure. These can be visualized using the geom_edge_*() family of geoms that contain a lot of different edge types for different scenarios. Sometimes the edges are implied by the layout (e.g. with treemaps) and need not be plotted, but often some sort of line is warranted.\n\n\n## Plotting a basic network graph\nThe code chunk below uses `ggraph()`, `geom-edge_link()` and `geom_node_point()` to plot a network graph by using `graph` which is the tbl_graph object that we created in previous section. \n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(graph) +\n  geom_edge_link() +\n  geom_node_point()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n:::{.callout-note}\n-   The basic plotting function is `ggraph()`, which takes the data to be used for the graph and the type of layout desired. \n-   Both of the arguments for `ggraph()` are built around igraph. Therefore, `ggraph()` can use either an igraph object or a tbl_graph object.\n\n:::\n\n## Customising ggraph's network graphs\nWe can use ggraph's `theme_graph()` to further customise our network graph. This `theme_graph()` is tuned for graph visualisations because the coordinate values are often of no importance  and axes are thus a distraction. Hence, ggraph has `theme_graph()`, a built-in theme to remove redundant elements. Furthermore the default behaviour is to use a narrow font so text takes up less space. Theme colour is defined by a background and foreground colour where the background defines the colour of the whole graphics area and the foreground defines the colour of the strip and border. By default strip and border is turned off as it is an unnecessary element unless facetting is used. To add a foreground colour to a plot that is already using theme_graph the th_foreground helper is provided. In order to use this appearance as default use the set_graph_style function. An added benefit of this is that it also changes the default text-related values in the different geoms for a completely coherent look. unset_graph_style can be used to revert the defaults back to their default settings (that is, they are not necessarily reverted back to what they were prior to calling set_graph_style). The th_no_axes() helper is provided to modify an existing theme so that grid and axes are removed.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#create the graph\ng <- ggraph(graph) +\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\n#adding the theme\ng + theme_graph()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n### Changing the plot colour \n\n`theme_graph()` makes it easy to change the coloring of the plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- ggraph(graph) + \n  geom_edge_link(aes(colour = 'grey50')) +\n  geom_node_point(aes(colour = 'grey40'))\n\ng + theme_graph(background = 'grey10',\n                text_colour = 'white')\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n## Working with ggraph's layouts \nggraph support many layout for standard used, they are: star, circle, nicely (default), dh, gem, graphopt, grid, mds, spahere, randomly, fr, kk, drl and lgl. Figures below and on the right show layouts supported by ggraph().\n\n\n:::{.panel-tabset}\n## Fruchterman and Reingold layout \n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- ggraph(graph, \n            layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n## star layout \n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- ggraph(graph, \n            layout = \"star\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n## eigen layout \n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- ggraph(graph, \n            layout = \"eigen\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n:::\n\n## Modifying network nodes \nWe can also define the colour each node by referring to their respective departments.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- ggraph(graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, \n                      size = 3))\n\ng + theme_graph()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n:::{.callout-note}\n## Observations \n\n-   geom_node_point is equivalent in functionality to geo_point of ggplot2. It allows for simple plotting of nodes in different shapes, colours and sizes. In the codes chnuks above colour and size are used.\n:::\n\n## Modifying Edges \nWe can also modify the edges such that the thickness of the edges will be mapped with the Weight variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- ggraph(graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\n\ng + theme_graph()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n:::{.callout-note}\n\ngeom_edge_link draws edges in the simplest way - as straight lines between the start and end nodes. But, it can do more that that. In the example above, argument width is used to map the width of the line in proportional to the Weight attribute and argument alpha is used to introduce opacity on the line.\n:::\n\n\n## Creating Facet Graphs \n\n### facet_edges() \n\n\n### facet_nodes() \n\n\n# Network Metrics Analysis \n\n## Computing Centrality Indices \n\n## Visualising Centrality Indices \n\n## Visualising Community \n\n# Building Interactive Network Graph with visNetwork \n\n## Data Preparation \n\n## Plotting the first interactive network graph \n\n## Working with layout \n\n## Working with visual attributes - Notes \n\n## Working with visual attributes - Edges \n\n## Interactivity \n\n# References \n\n",
    "supporting": [
      "Hands-on_Ex08_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}