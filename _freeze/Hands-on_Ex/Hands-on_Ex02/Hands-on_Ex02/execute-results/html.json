{
  "hash": "2a970ee8531a908c0d80d25b56900bb1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-On Exercise 2: Beyond ggplot2 Fundamentals\"\nauthor: \"Goh Si Hui\"\ndate: 2024/01/13\ndate-format: long\ndate-modified: \"last-modified\"\nformat: html \nexecute: \n  echo: true\n  eval: true\n  freeze: true\n  warning: false\n  message: false\neditor: visual \n---\n\n\n# About this Exercise\n\nIn this exercise, we will be introduced to the following ggplot2 extensions to create more elegant and effective statistical graphics:\n\n-   [ggrepel](https://ggrepel.slowkow.com/): allows us to control the placement of annotation on a graph\n\n-   [ggthemes](https://cran.r-project.org/web/packages/ggthemes/) and [hrbrthemes](https://cinc.rud.is/web/packages/hrbrthemes/): allows us to create professional publication quality figures\n\n-   [patchwork](https://patchwork.data-imaginist.com/): allow us to plot composite figure by combininig ggplot2 graphs\n\n# Getting Started\n\nBefore we start, let us ensure that the required R packages have been installed and import the relevant data for this hands-on exercise.\n\n## Installing and Launching R packages\n\nFor this exercise, other than tidyverse, we will use the following packages:\n\n-   ggrepel: an R package that provides geoms for ggplot2 to repel overlapping text labels\n\n-   ggthemes: an R package that provides extra themes, geoms and scales for ggplot2.\n\n-   hrbrthemes: an R package that providestypography-centric themes and theme components for ggplot2\n\n-   patchwork: an R package for preparing composite figures created using ggplot2.\n\nThe code chunk below uses `p_load()` of **pacman** package to check if the abovementioned packages are installed in the computer. If they are, they will be launched in R. Otherwise, **pacman** will install the relevant packages before launching them.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\npacman::p_load(tidyverse, ggrepel, patchwork, ggthemes, hrbrthemes)\n```\n:::\n\n\n::: callout-note\nNote that **pacman** package has already been installed before using the above code chunk. If you have not yet installed **pacman** please install it via Rstudios' \"Tools\" \\> \"Install Packages\" before using the above code chunk.\n:::\n\n## Importing the Data\n\nFor this exercise, we will be using the Exam_data provided by the course instructor.It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\n\nWe use `read_csv()` function of **readr** to import the Exam_data csv file into R then we will use `glimpse()` of **dplyr** to learn about the associated attribute information in the dataframe.\n\n::: panel-tabset\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam_data <- read_csv(\"data/Exam_data.csv\")\n```\n:::\n\n\n## Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(exam_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 322\nColumns: 7\n$ ID      <chr> \"Student321\", \"Student305\", \"Student289\", \"Student227\", \"Stude…\n$ CLASS   <chr> \"3I\", \"3I\", \"3H\", \"3F\", \"3I\", \"3I\", \"3I\", \"3I\", \"3I\", \"3H\", \"3…\n$ GENDER  <chr> \"Male\", \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", \"Male\", \"M…\n$ RACE    <chr> \"Malay\", \"Malay\", \"Chinese\", \"Chinese\", \"Malay\", \"Malay\", \"Chi…\n$ ENGLISH <dbl> 21, 24, 26, 27, 27, 31, 31, 31, 33, 34, 34, 36, 36, 36, 37, 38…\n$ MATHS   <dbl> 9, 22, 16, 77, 11, 16, 21, 18, 19, 49, 39, 35, 23, 36, 49, 30,…\n$ SCIENCE <dbl> 15, 16, 16, 31, 25, 16, 25, 27, 15, 37, 42, 22, 32, 36, 35, 45…\n```\n\n\n:::\n:::\n\n:::\n\nFrom the output from `glimpse()`, we note that:\n\n-   There are a total of seven attributes in the `exam_data` tibble data frame.\n\n-   Four of these attributes are categorical data: `ID`, `CLASS`, `GENDER` and `RACE` .\n\n-   Three of these attributes are continuous data: `MATHS`, `ENGLISH` and `SCIENCE.`\n\nWe will use the `summarize()`to get the summary statistics of the continuous data: `MATHS`, `ENGLISH` and `SCIENCE.`\n\n::: panel-tabset\n## Summary Statistics for MATHS Scores\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam_data %>% \n  summarize(min = min(MATHS),\n            q1 = quantile(MATHS, 0.25),\n            median = median(MATHS),\n            mean = mean(MATHS),\n            q3 = quantile(MATHS, 0.75),\n            max = max(MATHS))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 6\n    min    q1 median  mean    q3   max\n  <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl>\n1     9    58     74  69.3    85    99\n```\n\n\n:::\n:::\n\n\n## Summary Statistics for ENGLISH Scores\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam_data %>% \n  summarize(min = min(ENGLISH),\n            q1 = quantile(ENGLISH, 0.25),\n            median = median(ENGLISH),\n            mean = mean(ENGLISH),\n            q3 = quantile(ENGLISH, 0.75),\n            max = max(ENGLISH))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 6\n    min    q1 median  mean    q3   max\n  <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl>\n1    21    59     70  67.2    78    96\n```\n\n\n:::\n:::\n\n\n## Summary Statistics for SCIENCE Scores\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam_data %>% \n  summarize(min = min(SCIENCE),\n            q1 = quantile(SCIENCE, 0.25),\n            median = median(SCIENCE),\n            mean = mean(SCIENCE),\n            q3 = quantile(SCIENCE, 0.75),\n            max = max(SCIENCE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 6\n    min    q1 median  mean    q3   max\n  <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl>\n1    15  49.2     65  61.2  74.8    96\n```\n\n\n:::\n:::\n\n:::\n\n::: {callout-note}\nIn Hands-on Exercise 1, I used the `summary()` function of Basic R package to calculate the summary statistics for the continous attribute in the `exam_data` dataset. For this exercise, I used the `summarize()` function of **dplyr** package. While the **dplyr** package requires more codes to calculate the summary statistics as compared to the `summary()` function, it offers more flexibility and also returns a tibble dataframe. Hence, whether to use `summary()` or `summarize()` depends on user preference and what we want to do with the output.\n:::\n\n# Beyond ggplot2 Annotation: ggrepel\n\nAs mentioned in my Post-Lesson Thoughts 1, annotations are important to get user attention and also helps in our data storytelling. However, one of the challenges in plotting a statistical graph is annotation when we have a large number of data points.\n\nThe following chart is an example:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(data = exam_data, \n       aes(x= MATHS, y= ENGLISH)) +\n  geom_point() + \n  geom_smooth(method = lm, \n              size=0.5)+\n  coord_cartesian(xlim = c(0,100), \n                  ylim = c(0,100))+\n  geom_label(aes(label = ID), \n             hjust= .5, \n             vjust = -.5) +\n  ggtitle(\"English Scores versus Maths Scores for Primary 3 Students\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nThe overwhelming number of labels has blocked most of the data points!\n\n## Using ggrepel\n\nggrepel is an extension of ggplot2 package. It provides geoms of ggplot2 to repel overlapping text by replacing `geom_text()` with `geom_text_repel()` and replacing `geom_label()` with `geom_label_repel()`.\n\nLet us try it for the above chart!\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(data = exam_data, \n       aes(x= MATHS, y= ENGLISH)) +\n  geom_point() + \n  geom_smooth(method = lm, \n              size=0.5)+\n  coord_cartesian(xlim = c(0,100), \n                  ylim = c(0,100))+\n  geom_label_repel(aes(label = ID), \n             fontface = \"bold\") +\n  ggtitle(\"English Scores versus Maths Scores for Primary 3 Students (with ggrepel)\") \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\nIn the above output, we end up with only 5 labelled points, even though we did not limit or specify the number of labels. This is because ggrepel will discard some text labels if they overlap too many other things (default limit is 10). So if a text label overlaps 10 other text labels or data points, then it will be discarded.\n\nWe can expect to see a warning if some data points could not be labeled due to too many overlaps.\n\nSet `max.overlaps = Inf` to override this behavior and always show all labels, regardless of whether or not a text label overlaps too many other things.\n\nUse `options(ggrepel.max.overlaps = Inf)` to set this globally for your entire session. The global option can be overridden by providing the `max.overlaps` argument to `geom_text_repel()`.\n:::\n\n## Other examples of ggrepel\n\nThere are other exciting customisations that we can do for ggreply. Here are some examples that I think will be useful for my personal work.\n\n### Hide Some of the labels (or show only certain labels)\n\nt For example, we only want to label and highlight those students who score less than 30 for both English and Maths amongst those students who score less than 50 for both English and Maths (assuming 50 is the passing score), we will: 1. Subset the tibble dataframe to contain only those who did not meet the passing score of English and Maths. 2. Create a new column to set the IDs of those students who score more than 30 for English and Maths to an empty string \"\" to hide them, and those who score less than 30 for both English and Maths would show their ID. 3. Then we plot the scatterplot using geom_point and also indicate to color those points with students who score less than 30 for both English and Maths in red.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nexam_data2 <- subset(exam_data, MATHS < 50 & ENGLISH < 50)\n\nexam_data2$ID_select <- ifelse(exam_data2$MATHS <30 & exam_data2$ENGLISH <30, exam_data2$ID, \"\")\n\nggplot(exam_data2, \n       aes(MATHS, ENGLISH, label = ID_select)) +\n  geom_text_repel() + \n  geom_point(color = ifelse(exam_data2$MATHS < 30 & exam_data2$ENGLISH < 30, \"red\", \"grey50\"))+\n  coord_cartesian(xlim = c(0,50), \n                  ylim = c(0,50))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n### Using ggrepel with stat_summary()\n\nWe can use stat_summary() with geom = \"text_repel\". The position_nudge_repel() function nudges the text label’s position, but it also remembers the original position of the data point.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(exam_data, aes(factor(CLASS), MATHS)) + \n  stat_summary(\n    fill = \"darkseagreen\",\n    color = \"black\", \n    fun = \"mean\", \n    geom = \"col\") + stat_summary(\n      aes(label = round(stat(y))),\n      fun = \"mean\",\n      geom = \"text_repel\",\n      min.segment.length = 0, \n      position = position_nudge_repel(y = -2)) +\n  labs(title = \"Mean Maths Scores Across Classes\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nYou can learn more about ggrepel [here](https://ggrepel.slowkow.com/articles/examples#examples)!\n\n# Beyond ggplot2 Themes: ggthemes and hrbrthemes\n\nAs seen in Hands-on Exercise 1, ggplot2 comes with eight built-in themes:\n\n-   `theme_gray()`\n\n-   `theme_bw()`\n\n-   `theme_classic()`\n\n-   `theme_dark()`\n\n-   `theme_light()`\n\n-   `theme_linedraw()`\n\n-   `theme_minimal()`\n\n-   `theme_void()`\n\nHere are some examples of the ggplot2 themes\n\n::: panel-tabset\n## theme_minimal()\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color = \"black\",\n                 fill = \"darkslategrey\") + \n  geom_vline(aes(xintercept=mean(MATHS)),\n            color=\"deepskyblue\", linetype=\"dashed\", size=0.7)+\n  annotate(\"text\",\n           x = mean(exam_data$MATHS), \n           y = 40, \n           label = paste(\"Mean=\", round(mean(exam_data$MATHS))),\n           col = \"black\") + \n  theme_minimal() + \n  ggtitle(\"Distribution of Maths Scores\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n## theme_light()\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color = \"black\",\n                 fill = \"darkslategrey\") + \n  geom_vline(aes(xintercept=mean(MATHS)),\n            color=\"deepskyblue\", linetype=\"dashed\", size=0.7)+\n  annotate(\"text\",\n           x = mean(exam_data$MATHS), \n           y = 40, \n           label = paste(\"Mean=\", round(mean(exam_data$MATHS))),\n           col = \"black\") + \n  theme_light() + \n  ggtitle(\"Distribution of Maths Scores\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n:::\n\n## ggthemes\n\nggthemes provides ggplots2 with themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\n\n::: panel-tabset\n## theme_economist()\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color = \"black\",\n                 fill = \"darkslategrey\") + \n  geom_vline(aes(xintercept=mean(MATHS)),\n            color=\"deepskyblue\", linetype=\"dashed\", size=0.7)+\n  annotate(\"text\",\n           x = mean(exam_data$MATHS), \n           y = 40, \n           label = paste(\"Mean=\", round(mean(exam_data$MATHS))),\n           col = \"black\") + \n  theme_economist() + \n  ggtitle(\"Distribution of Maths Scores\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n## theme_solarized()\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color = \"black\",\n                 fill = \"darkslategrey\") + \n  geom_vline(aes(xintercept=mean(MATHS)),\n            color=\"deepskyblue\", linetype=\"dashed\", size=0.7)+\n  annotate(\"text\",\n           x = mean(exam_data$MATHS), \n           y = 40, \n           label = paste(\"Mean=\", round(mean(exam_data$MATHS))),\n           col = \"black\") + \n  theme_solarized() + \n  ggtitle(\"Distribution of Maths Scores\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n:::\n\n## hrbrthemes\n\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\n::: panel-tabset\n## theme_ipsum_rc()\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color = \"black\",\n                 fill = \"darkslategrey\") + \n  geom_vline(aes(xintercept=mean(MATHS)),\n            color=\"deepskyblue\", linetype=\"dashed\", linewidth=0.7)+\n  annotate(\"text\",\n           x = mean(exam_data$MATHS), \n           y = 40, \n           label = paste(\"Mean=\", round(mean(exam_data$MATHS))),\n           col = \"black\") + \n  ggtitle(\"Distribution of Maths Scores\") + \n  theme_ipsum_rc()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n## theme_ft_rc()\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(exam_data, aes(MATHS, ENGLISH)) +\n  geom_point(color = ft_cols$yellow, show.legend = FALSE) + \n  labs(title=\"Maths Scores Versus English Scores for Primary 3 Students\",\n       subtitle = \"Passing Score for Maths and English is 50 marks\",\n       caption = \"VAA Hands-on Exercise 2\")+ \n  geom_vline(aes(xintercept=50, color=ft_cols$peach), show.legend = FALSE) + \n  geom_hline(aes(yintercept=50, color=ft_cols$peach), show.legend = FALSE)+\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) + \n  theme_ft_rc(font_rc)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n:::\n\n::: {.callout-note appearance=\"simple\"}\n## Hit a Speed Bump Here! [![](images/warning_icon.jpg){width=\"75\"}](https://www.freepik.com/free-vector/warning-sign-with-warning-word_94865640.htm#query=warning%20sign&position=4&from_view=search&track=ais&uuid=c681238a-3f70-4cdf-b033-b50b02deedfe)\n\nWhen trying out this section I encountered error messages stating that I do not have the font family in Windows font database.\\\nSo here's what I have tried:\n\n1.  Install the fonts from hrbrthemes folder (found in \"R\" folder's \"library\" folder) but that did not work.\n\n2.  So I found some websites stating that I should `import_roboto_condensed()` first and also install the fonts on my system before trying to use this theme. So I imported all the fonts needed for hrbrtheme and this method works for me!\n\nReferences used are [here](https://github.com/hrbrmstr/hrbrthemes/issues/28), [here](https://stackoverflow.com/questions/71573377/cannot-import-fonts-into-r) and [here](https://www.rdocumentation.org/packages/hrbrthemes/versions/0.8.0/topics/theme_ft_rc).\n:::\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used.\n\nA “production workflow” is when you intend for the output of your work to be put into a publication of some kind, whether it be a blog post, academic paper, presentation, internal report or industry publication. When you’re cranking through an analysis, the visual elements don’t need to be perfect. They are there to validate/support your work and are more of a starting point for the finished product than anything else. The level of attention to detail on the final graphical products can be a great motivator for your audience to either dive deep into your analysis text or relegate it to the TLDR pile.\n\nSounds like hrbrtheme package has its own ideas and views on what makes an effective and visually appealing chart! Read more about why they chose certain fonts [here](https://cran.r-project.org/web/packages/hrbrthemes/vignettes/why_hrbrthemes.html)!\n\nLet us try to explore more about hrbrthemes using the following code chunk.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(exam_data, aes(MATHS, ENGLISH)) +\n  geom_point(color = ft_cols$yellow, show.legend = FALSE) + \n  labs(title=\"Maths Scores Versus English Scores for Primary 3 Students\",\n       subtitle = \"Passing Score for Maths and English is 50 marks\",\n       caption = \"VAA Hands-on Exercise 2\")+ \n  geom_vline(aes(xintercept=50, color=ft_cols$peach), show.legend = FALSE) + \n  geom_hline(aes(yintercept=50, color=ft_cols$peach), show.legend = FALSE)+\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) + \n  theme_ft_rc(plot_title_size = 15, \n              subtitle_size = 10, \n              axis_title_size = 10, \n              caption_size = 10,\n              base_size = 10,\n              plot_margin = margin(10,10,10,10),\n              grid = \"Y\") \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-note appearance=\"simple\"}\n## What the arguments in the above code chunk's `theme_ft_rc` means\n\n-   `plot_title_size` argument decreased the font size of the chart title from 18 (default) to 15\n-   `subtitle_size` argument decreased the font size of the subtitle from 13 (default) to 10\n-   `axis_title_size` argument increased the font size of the axis title from 9 (default) to 10\n-   `caption_size` argument increased the font size from 9 (default) to 10\n-   `base_size` argument decreased the default axis label from 11.5 (default) to 10\n-   `plot_margin` argument narrowed the margins of all 4 sides from 30 (default) to 10.\n-   `grid` argument removed the x-axis grid lines\n\nFor more details on the arguments of the theme, take a look [here](https://cinc.rud.is/web/packages/hrbrthemes/reference/theme_ipsum_rc.html)!\n:::\n\n# Beyond Single Graph: Patchwork\n\nSometimes we need to use multiple graphs to tell a compelling visual story. There are several ggplot2 extensions that provide functions to create figures with multiple graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package.\n\nIn this section, we will learn how to create composite graphs using a ggplot2 extension called patchwork, which is sepcially designed for combining separate ggplot2 graphs into a single figure.\n\nFirst, let us create three statistical graphics using the following code chunks.\n\n::: panel-tabset\n## Distribution of Maths Scores\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\np1 <- ggplot(exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100, color = ft_cols$gray) +\n  coord_cartesian(xlim=c(0,100))+\n  labs(x = \"Maths Scores\", y = \"Number of Students\",\n       title = \"Distribution of Maths Scores\")+\n  theme_ipsum_rc(axis_title_size = 10, \n                 plot_title_size = 12,\n                 plot_margin = margin(10,10,10,10),\n                 grid = \"Y\")\n\np1\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n## Distribution of English Scores\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\np2 <- ggplot(exam_data, \n       aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100, color = ft_cols$gray) +\n  coord_cartesian(xlim=c(0,100))+\n  labs(x = \"English Scores\", y = \"Number of Students\",\n       title = \"Distribution of English Scores\")+\n  theme_ipsum_rc(axis_title_size = 10, \n                 plot_title_size = 12, \n                 plot_margin = margin(10,10,10,10),\n                 grid = \"Y\")\n\np2\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n## English Scores vs Maths Scores\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\np3 <- ggplot(exam_data, \n       aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              size = 0.5) + \n  coord_cartesian(xlim=c(0,100),\n                  ylim= c(0,100))+\n  labs(x = \"Maths Scores\", y = \"English Scores\",\n       title = \"English Scores versus Maths Scores\") +\n  theme_ipsum_rc(axis_title_size = 10, \n                 plot_title_size = 12, \n                 plot_margin = margin(10,10,10,10),\n                 grid = \"Y\")\n\np3\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n:::\n\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax:\n\n-   We can create two-Column Layout side by side using the Plus Sign +.\n\n-   Parenthesis () to create a subplot group.\n\n-   We can stack two charts on top of each other (i.e., Two-Row Layout) using the Division Sign /.\n\n-   We can place subplot groups or two charts side by side using the Pipe sign \\|.\n\n## Combining two ggplot2 graphs\n\nThe figure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot!\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\np1 + p2\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n## Combining three ggplot2 graphs\n\nIn the code chunk we below, we use tThe pipe sign \\| will place subplots group (i.e. p1 and p2 next to another plot (i.e. p3) while the division sign / will place p1 and p2 on top of each other.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n(p1 / p2) | p3 \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n## Creating a composite figure with a tag\n\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown below.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n((p1 / p2) | p3) + plot_annotation(tag_levels = \"A\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n## Creating Figure with inset_element()\n\nBesides providing functions to place plots next to each other based on the provided layout, with inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\np3 + inset_element(p2, \n                   left = 0,\n                   bottom = 0.6,\n                   right = 0.4,\n                   top =1, align_to = 'panel')\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n## Creating a composite figure using patchwork and ggtheme\n\nWe can also add a theme from ggtheme to the output created from patchwork, as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npatchwork <- (p1 / p2) | p3\npatchwork & theme_calc() \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n# My Takeaways\n\nIn this hands-on exercise, we explored ggplot2 extensions:\n\n-   how to make use of ggrepel to control the placement of annotations on a graph;\n\n-   how ggthemes and hrbrthemes allow us to create publication-quality figures; and\n\n-   how we can create composite figures using patchwork to combine ggplot2 graphs.\n\nThere are also many more interesting ggplot2 extensions to explore [here](https://exts.ggplot2.tidyverse.org/gallery/) so that we can create more effective, informative and elegant charts.\n\n# References\n\n-   Arnold, J.B. (2024). *ggthemes.* <https://jrnold.github.io/ggthemes/index.html>.\n-   Kam, T. S. (2023). *R for Visual Analytics* \\[Web-book\\]. <https://r4va.netlify.app/>.\n-   Pedersen T (2024). *patchwork: The Composer of Plots*. R package version 1.2.0.9000, https://github.com/thomasp85/patchwork, [https://patchwork.data-imaginist.com](https://patchwork.data-imaginist.com/).\n-   Rudis, B. (2024). *hrbrthemes*. <https://github.com/hrbrmstr/hrbrthemes/>.\n-   Slowikowski K (2024). *ggrepel: Automatically Position Non-Overlapping Text Labels with 'ggplot2'*. <https://ggrepel.slowkow.com>/,[https://github.com/slowkow/ggrepel.](https://github.com/slowkow/ggrepel)\n",
    "supporting": [
      "Hands-on_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}