{
  "hash": "67a46920bc84e2832882c35c252fb2ad",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class_Ex04\"\nauthor: \"Goh Si Hui\"\ndate: 2024/03/16\ndate-format: long\ndate-modified: \"last-modified\"\nformat: html \nexecute: \n  echo: true\n  eval: true\n  freeze: true\n  warning: false\n  message: false\n---\n\n\n# About this hands on exercise \n\n\n\n# Getting Started \n\n## Installing the packages \n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidygraph, ggraph, visNetwork, lubridate, clock, tidyverse, graphlayouts)\n```\n:::\n\n\n-   clock is meant for time \n-   lubridate is meant for date columns \n-   graphlayout: complement ggraph \n\n:::{.callout-note}\n-   if we are using tidygraph, there's no need for igraph. \n:::\n\n\n## Importing the Data \n::: panel-tabset\n## node\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnode <- read_csv(\"data/GAStech_email_node.csv\")\nstr(node)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nspc_tbl_ [54 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ id        : num [1:54] 1 2 3 4 5 6 7 44 45 46 ...\n $ label     : chr [1:54] \"Mat.Bramar\" \"Anda.Ribera\" \"Rachel.Pantanal\" \"Linda.Lagos\" ...\n $ Department: chr [1:54] \"Administration\" \"Administration\" \"Administration\" \"Administration\" ...\n $ Title     : chr [1:54] \"Assistant to CEO\" \"Assistant to CFO\" \"Assistant to CIO\" \"Assistant to COO\" ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   id = col_double(),\n  ..   label = col_character(),\n  ..   Department = col_character(),\n  ..   Title = col_character()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n```\n\n\n:::\n:::\n\n\nGAStech_email_nodes.csv consist of the name, department and title of the employees.\n\n## edge\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedge <- read_csv(\"data/GAStech_email_edge-v2.csv\")\nstr(edge)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nspc_tbl_ [9,063 × 8] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ source     : num [1:9063] 43 43 44 44 44 44 44 44 44 44 ...\n $ target     : num [1:9063] 41 40 51 52 53 45 44 46 48 49 ...\n $ SentDate   : chr [1:9063] \"6/1/2014\" \"6/1/2014\" \"6/1/2014\" \"6/1/2014\" ...\n $ SentTime   : 'hms' num [1:9063] 08:39:00 08:39:00 08:58:00 08:58:00 ...\n  ..- attr(*, \"units\")= chr \"secs\"\n $ Subject    : chr [1:9063] \"GT-SeismicProcessorPro Bug Report\" \"GT-SeismicProcessorPro Bug Report\" \"Inspection request for site\" \"Inspection request for site\" ...\n $ MainSubject: chr [1:9063] \"Work related\" \"Work related\" \"Work related\" \"Work related\" ...\n $ sourceLabel: chr [1:9063] \"Sven.Flecha\" \"Sven.Flecha\" \"Kanon.Herrero\" \"Kanon.Herrero\" ...\n $ targetLabel: chr [1:9063] \"Isak.Baza\" \"Lucas.Alcazar\" \"Felix.Resumir\" \"Hideki.Cocinaro\" ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   source = col_double(),\n  ..   target = col_double(),\n  ..   SentDate = col_character(),\n  ..   SentTime = col_time(format = \"\"),\n  ..   Subject = col_character(),\n  ..   MainSubject = col_character(),\n  ..   sourceLabel = col_character(),\n  ..   targetLabel = col_character()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n```\n\n\n:::\n:::\n\n\n\n# Data Wrangling \n\n\n::: {.cell}\n\n```{.r .cell-code}\nedge <- edge %>% \n  mutate(SendDate = dmy(SentDate)) %>%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE, # label the date \n                        abbr = FALSE )) # to spell out the day in full e.g. Monday instead of MON\n\nstr(edge)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [9,063 × 10] (S3: tbl_df/tbl/data.frame)\n $ source     : num [1:9063] 43 43 44 44 44 44 44 44 44 44 ...\n $ target     : num [1:9063] 41 40 51 52 53 45 44 46 48 49 ...\n $ SentDate   : chr [1:9063] \"6/1/2014\" \"6/1/2014\" \"6/1/2014\" \"6/1/2014\" ...\n $ SentTime   : 'hms' num [1:9063] 08:39:00 08:39:00 08:58:00 08:58:00 ...\n  ..- attr(*, \"units\")= chr \"secs\"\n $ Subject    : chr [1:9063] \"GT-SeismicProcessorPro Bug Report\" \"GT-SeismicProcessorPro Bug Report\" \"Inspection request for site\" \"Inspection request for site\" ...\n $ MainSubject: chr [1:9063] \"Work related\" \"Work related\" \"Work related\" \"Work related\" ...\n $ sourceLabel: chr [1:9063] \"Sven.Flecha\" \"Sven.Flecha\" \"Kanon.Herrero\" \"Kanon.Herrero\" ...\n $ targetLabel: chr [1:9063] \"Isak.Baza\" \"Lucas.Alcazar\" \"Felix.Resumir\" \"Hideki.Cocinaro\" ...\n $ SendDate   : Date[1:9063], format: \"2014-01-06\" \"2014-01-06\" ...\n $ Weekday    : Ord.factor w/ 7 levels \"Sunday\"<\"Monday\"<..: 6 6 6 6 6 6 6 6 6 6 ...\n```\n\n\n:::\n:::\n\n\n:::{.callout-note}\n## Observations \n\n-   Note that we now have two additional columns in the `edge` dataframe: `SentDate` and `Weekday`. \n-   `SentDate` is a date datatype and it has a yyyy-mm-dd format. \n-   `Weekday` is an ordinal data type with 7 levels (1 level for each day)\n\n:::\n\nNow we will aggregate the edges because they are currently at an individual level. Each row is an edge currently.\n\n::: {.cell}\n\n```{.r .cell-code}\nedge_aggregated <- edge %>%\n  filter(MainSubject == \"Work related\") %>%\n  group_by(source, target, Weekday) %>%\n  summarise(Weight = n()) %>%\n  filter(source != target) %>%\n  filter(Weight > 1) %>%\n  ungroup()\n\nglimpse(edge_aggregated)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1,372\nColumns: 4\n$ source  <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  <dbl> 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6,…\n$ Weekday <ord> Sunday, Monday, Tuesday, Wednesday, Friday, Sunday, Monday, Tu…\n$ Weight  <int> 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5,…\n```\n\n\n:::\n:::\n\n\n:::{.callout-note}\n\n## About the above code chunk \n\n-   First, we filter the edges by `MainSubject` so we get edges for `Work-related` emails. \n-   We will aggregate the edges by summing the edges using their `source`, `target` and `Weekday`\n-   We will also filter out edges where the sender sends emails to themselves and those edges with weight less than 1\n\n::: \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph <- tbl_graph(nodes = node,\n                   edges = edge_aggregated,\n                   directed = TRUE)\n\ngraph \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 54 × 4 (active)\n      id label               Department     Title                               \n   <dbl> <chr>               <chr>          <chr>                               \n 1     1 Mat.Bramar          Administration Assistant to CEO                    \n 2     2 Anda.Ribera         Administration Assistant to CFO                    \n 3     3 Rachel.Pantanal     Administration Assistant to CIO                    \n 4     4 Linda.Lagos         Administration Assistant to COO                    \n 5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Mana…\n 6     6 Carla.Forluniau     Administration Assistant to IT Group Manager       \n 7     7 Cornelia.Lais       Administration Assistant to Security Group Manager \n 8    44 Kanon.Herrero       Security       Badging Office                      \n 9    45 Varja.Lagos         Security       Badging Office                      \n10    46 Stenig.Fusil        Security       Building Control                    \n# ℹ 44 more rows\n#\n# Edge Data: 1,372 × 4\n   from    to Weekday Weight\n  <int> <int> <ord>    <int>\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows\n```\n\n\n:::\n:::\n\n\n:::{.callout-note}\n## About the above code chunk \n\n-   From the documentation, we see that we need to indicate the dataframe for the nodes and the dataframe for the edges. -   In addition, we should indicate if the output graph should be directed. For this exercise, a directed graph makes sense because there is a \"direction\" since we have a sender and recipient. \n-   We can review the output graph by generating the resultant network graph `graph`. \n\n\n::: \n\n# Plotting a Network Graph \n\nNow we can plot out the network graph using ggraph. \n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(graph) + #create layout \n  geom_edge_link() + # note that ggplot has geom_edge and geom_link! so we should use geom_edge_link and geom_node_point\n  geom_node_point()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n:::{.callout-note}\n-   Note that ggraph follows the convention of ggplot and tmap. \n-   For the `geom_edge_link()` and `geom_node_point()`, we can add aesthetics by defining parameters within them. (We will see them in Hands-on Exercise 8 and the following code chunk). \n-   If we want to draw curved edges instead of straight edges, we need to use `geom_edge_arc`\n\n:::\n\n# Adding Aesthetics to Network Graph\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- ggraph(graph) + \n  geom_edge_link(aes(colour = 'grey50')) +\n  geom_node_point(aes(colour = 'grey40'))\n\ng + theme_graph(background = 'grey10',\n                text_colour = 'white')\n```\n\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n# Changing the Network Graph's Layout \n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- ggraph(graph, \n            layout = \"fr\") + #alternative is to use layout_with_fr() if we look at igraph's documentation\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#trying out a different layout\ng <- ggraph(graph, \n            layout = \"kk\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#trying out a different layout\ng <- ggraph(graph, \n            layout = \"dh\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n# Further Customising the Network Graph \n\n::: {.cell}\n\n```{.r .cell-code}\ng <- ggraph(graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(color = Department,\n                      size = 3))\n\ng + theme_graph()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n:::{.callout-note}\n## About the above code chunk\n\n-   Similar to ggplot, we add `aes()` to add further aesthetics to the graph. \n-   In the above example, we colour the nodes based on the employees' department. \n\n:::\n\n\n:::{.panel-tabset}\n## Added width but did not indicate alpha and scale_edge_width\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- ggraph(graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\n\ng + theme_graph()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nIt is very hard to read because the lines overlap. \n\n## Added width and alpha but did not indicate scale_edge_width\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- ggraph(graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\n\ng + theme_graph()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nNow the output is a bit better. \n\n## Added scale_edge_width\nWe can add scale_edge_width() to give the range of the \"thickness\" of the edges. \n\n::: {.cell}\n\n```{.r .cell-code}\ng <- ggraph(graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\n\ng + theme_graph()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n:::\n\n# Facetting Network Graphs \n\n\n::: {.cell}\n\n```{.r .cell-code}\nset_graph_style()\n\ng <- ggraph(graph, layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight),\n                 alpha = 0.2) +\n  scale_edge_width(range = c(0.1, 5)) + \n  geom_node_point(aes(color = Department),\n                  size = 2)\n\ng + facet_edges(~Weekday)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n\n# Calculating Centrality \n\nggraph's centrality measures all start with \"centrality\" so it is easy to locate them in the documentation and . In comparison, igraph's centrality calculations' synatax are less consistent. \n\n\nHere is an example of calculating betweenness centrality:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- graph %>%\n  mutate(betweenness_centrality = centrality_betweenness()) %>%\n  ggraph(layout = \"fr\") +\n  geom_edge_link(aes(width=Weight),\n                 alpha = 0.2) +\n  scale_edge_width(range = c(0.1, 5)) + \n  geom_node_point(aes(color = Department,\n                  size = betweenness_centrality)) # to set the size of the nodes based on the centrality measure that we calculated\n\ng + theme_graph() +\n  labs(title = 'The email relationship between employees based on betweenness centrality')\n```\n\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-html/unnamed-chunk-17-1.png){width=1152}\n:::\n:::\n\n\n\n:::{.callout-note}\n## About the above code chunk\n-   We use `mutate()` to create a new column for the betweenness centrality values calculated using `centrality_betweenness()`.\n-   Then we use the betweenness centrality values to determine the size of the nodes. Those nodes with higher betweenness centrality, they will be bigger, and vice versa. \n\n:::\n\n\n# Creating Interactive Network Graph\n\nPlease refer to my [hands-on Exercise 8](https://gsh-vaa.netlify.app/hands-on_ex/hands-on_ex08/hands-on_ex08)! :) \n",
    "supporting": [
      "In-class_Ex04_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}